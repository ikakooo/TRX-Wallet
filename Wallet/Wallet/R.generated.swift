//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let reuseIdentifier = reuseIdentifier()

  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var image: image { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }
    var tron: tron { .init(source: .init(bundle: bundle, tableName: "Tron", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }
    func tron(preferredLanguages: [String]) -> tron {
      .init(source: .init(bundle: bundle, tableName: "Tron", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 230 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: Advanced
      ///
      /// Key: Advanced
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      var advanced: RswiftResources.StringResource { .init(key: "Advanced", tableName: "Localizable", source: source, developmentValue: "Advanced", comment: nil) }

      /// en translation: Approve
      ///
      /// Key: Approve
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var approve: RswiftResources.StringResource { .init(key: "Approve", tableName: "Localizable", source: source, developmentValue: "Approve", comment: nil) }

      /// en translation: Bookmarks
      ///
      /// Key: Bookmarks
      ///
      /// Locales: de, zh-Hans, ja, en, ru
      var bookmarks: RswiftResources.StringResource { .init(key: "Bookmarks", tableName: "Localizable", source: source, developmentValue: "Bookmarks", comment: nil) }

      /// en translation: Cancel
      ///
      /// Key: Cancel
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      var cancel: RswiftResources.StringResource { .init(key: "Cancel", tableName: "Localizable", source: source, developmentValue: "Cancel", comment: nil) }

      /// en translation: Chain ID
      ///
      /// Key: Chain ID
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var chainID: RswiftResources.StringResource { .init(key: "Chain ID", tableName: "Localizable", source: source, developmentValue: "Chain ID", comment: nil) }

      /// en translation: Collectibles
      ///
      /// Key: Collectibles
      ///
      /// Locales: de, zh-Hans, ja, en, vi
      var collectibles: RswiftResources.StringResource { .init(key: "Collectibles", tableName: "Localizable", source: source, developmentValue: "Collectibles", comment: nil) }

      /// en translation: Contract TrustCore.Address
      ///
      /// Key: Contract TrustCore.Address
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var contractTrustCoreAddress: RswiftResources.StringResource { .init(key: "Contract TrustCore.Address", tableName: "Localizable", source: source, developmentValue: "Contract TrustCore.Address", comment: nil) }

      /// en translation: Copy
      ///
      /// Key: Copy
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      var copy: RswiftResources.StringResource { .init(key: "Copy", tableName: "Localizable", source: source, developmentValue: "Copy", comment: nil) }

      /// en translation: Copy TrustCore.Address
      ///
      /// Key: Copy TrustCore.Address
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var copyTrustCoreAddress: RswiftResources.StringResource { .init(key: "Copy TrustCore.Address", tableName: "Localizable", source: source, developmentValue: "Copy TrustCore.Address", comment: nil) }

      /// en translation: Decimals
      ///
      /// Key: Decimals
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var decimals: RswiftResources.StringResource { .init(key: "Decimals", tableName: "Localizable", source: source, developmentValue: "Decimals", comment: nil) }

      /// en translation: Delete
      ///
      /// Key: Delete
      ///
      /// Locales: de, zh-Hans, ja, en, vi, th
      var delete: RswiftResources.StringResource { .init(key: "Delete", tableName: "Localizable", source: source, developmentValue: "Delete", comment: nil) }

      /// en translation: Deleting
      ///
      /// Key: Deleting
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      var deleting: RswiftResources.StringResource { .init(key: "Deleting", tableName: "Localizable", source: source, developmentValue: "Deleting", comment: nil) }

      /// en translation: Disable
      ///
      /// Key: Disable
      ///
      /// Locales: zh-Hans, ja, en, zh-Hant, vi, ru, fr, th
      var disable: RswiftResources.StringResource { .init(key: "Disable", tableName: "Localizable", source: source, developmentValue: "Disable", comment: nil) }

      /// en translation: Edit
      ///
      /// Key: Edit
      ///
      /// Locales: de, zh-Hans, ja, en, vi, th
      var edit: RswiftResources.StringResource { .init(key: "Edit", tableName: "Localizable", source: source, developmentValue: "Edit", comment: nil) }

      /// en translation: Empty
      ///
      /// Key: Empty
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      var empty: RswiftResources.StringResource { .init(key: "Empty", tableName: "Localizable", source: source, developmentValue: "Empty", comment: nil) }

      /// en translation: Endpoint
      ///
      /// Key: Endpoint
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var endpoint: RswiftResources.StringResource { .init(key: "Endpoint", tableName: "Localizable", source: source, developmentValue: "Endpoint", comment: nil) }

      /// en translation: Ethereum TrustCore.Address
      ///
      /// Key: Ethereum TrustCore.Address
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      var ethereumTrustCoreAddress: RswiftResources.StringResource { .init(key: "Ethereum TrustCore.Address", tableName: "Localizable", source: source, developmentValue: "Ethereum TrustCore.Address", comment: nil) }

      /// en translation: History
      ///
      /// Key: History
      ///
      /// Locales: de, zh-Hans, ja, en, ru
      var history: RswiftResources.StringResource { .init(key: "History", tableName: "Localizable", source: source, developmentValue: "History", comment: nil) }

      /// en translation: This wallet can be only used for watching. Import Private Key/Keystore to sign transactions/messages
      ///
      /// Key: InCoordinatorError.onlyWatchAccount
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      var inCoordinatorErrorOnlyWatchAccount: RswiftResources.StringResource { .init(key: "InCoordinatorError.onlyWatchAccount", tableName: "Localizable", source: source, developmentValue: "This wallet can be only used for watching. Import Private Key/Keystore to sign transactions/messages", comment: nil) }

      /// en translation: Keystore JSON
      ///
      /// Key: Keystore JSON
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var keystoreJSON: RswiftResources.StringResource { .init(key: "Keystore JSON", tableName: "Localizable", source: source, developmentValue: "Keystore JSON", comment: nil) }

      /// en translation: Loading
      ///
      /// Key: Loading
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var loading: RswiftResources.StringResource1<String> { .init(key: "Loading", tableName: "Localizable", source: source, developmentValue: "Loading", comment: nil) }

      /// en translation: Mnemonic
      ///
      /// Key: Mnemonic
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      var mnemonic: RswiftResources.StringResource { .init(key: "Mnemonic", tableName: "Localizable", source: source, developmentValue: "Mnemonic", comment: nil) }

      /// en translation: More Details
      ///
      /// Key: More Details
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      var moreDetails: RswiftResources.StringResource { .init(key: "More Details", tableName: "Localizable", source: source, developmentValue: "More Details", comment: nil) }

      /// en translation: Name
      ///
      /// Key: Name
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, th
      var name: RswiftResources.StringResource { .init(key: "Name", tableName: "Localizable", source: source, developmentValue: "Name", comment: nil) }

      /// en translation: New
      ///
      /// Key: New
      ///
      /// Locales: de, zh-Hans, ja, en, ru
      var new: RswiftResources.StringResource { .init(key: "New", tableName: "Localizable", source: source, developmentValue: "New", comment: nil) }

      /// en translation: Next
      ///
      /// Key: Next
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var next: RswiftResources.StringResource { .init(key: "Next", tableName: "Localizable", source: source, developmentValue: "Next", comment: nil) }

      /// en translation: Nonce
      ///
      /// Key: Nonce
      ///
      /// Locales: en
      var nonce: RswiftResources.StringResource { .init(key: "Nonce", tableName: "Localizable", source: source, developmentValue: "Nonce", comment: nil) }

      /// en translation: OK
      ///
      /// Key: OK
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var oK: RswiftResources.StringResource { .init(key: "OK", tableName: "Localizable", source: source, developmentValue: "OK", comment: nil) }

      /// en translation: Password
      ///
      /// Key: Password
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var password: RswiftResources.StringResource { .init(key: "Password", tableName: "Localizable", source: source, developmentValue: "Password", comment: nil) }

      /// en translation: Private Key
      ///
      /// Key: Private Key
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      var privateKey: RswiftResources.StringResource { .init(key: "Private Key", tableName: "Localizable", source: source, developmentValue: "Private Key", comment: nil) }

      /// en translation: Refresh
      ///
      /// Key: Refresh
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var refresh: RswiftResources.StringResource { .init(key: "Refresh", tableName: "Localizable", source: source, developmentValue: "Refresh", comment: nil) }

      /// en translation: Retry
      ///
      /// Key: Retry
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var retry: RswiftResources.StringResource { .init(key: "Retry", tableName: "Localizable", source: source, developmentValue: "Retry", comment: nil) }

      /// en translation: Send
      ///
      /// Key: Send
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var send: RswiftResources.StringResource { .init(key: "Send", tableName: "Localizable", source: source, developmentValue: "Send", comment: nil) }

      /// en translation: Symbol
      ///
      /// Key: Symbol
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var symbol: RswiftResources.StringResource { .init(key: "Symbol", tableName: "Localizable", source: source, developmentValue: "Symbol", comment: nil) }

      /// en translation: Today
      ///
      /// Key: Today
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var today: RswiftResources.StringResource { .init(key: "Today", tableName: "Localizable", source: source, developmentValue: "Today", comment: nil) }

      /// en translation: Tokens
      ///
      /// Key: Tokens
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var tokens: RswiftResources.StringResource { .init(key: "Tokens", tableName: "Localizable", source: source, developmentValue: "Tokens", comment: nil) }

      /// en translation: Yesterday
      ///
      /// Key: Yesterday
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var yesterday: RswiftResources.StringResource { .init(key: "Yesterday", tableName: "Localizable", source: source, developmentValue: "Yesterday", comment: nil) }

      /// en translation: Make sure you have backup of your wallet.
      ///
      /// Key: accounts.confirm.delete.message
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var accountsConfirmDeleteMessage: RswiftResources.StringResource { .init(key: "accounts.confirm.delete.message", tableName: "Localizable", source: source, developmentValue: "Make sure you have backup of your wallet.", comment: nil) }

      /// en translation: Delete
      ///
      /// Key: accounts.confirm.delete.okTitle
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var accountsConfirmDeleteOkTitle: RswiftResources.StringResource { .init(key: "accounts.confirm.delete.okTitle", tableName: "Localizable", source: source, developmentValue: "Delete", comment: nil) }

      /// en translation: Are you sure you would like to delete this wallet?
      ///
      /// Key: accounts.confirm.delete.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var accountsConfirmDeleteTitle: RswiftResources.StringResource { .init(key: "accounts.confirm.delete.title", tableName: "Localizable", source: source, developmentValue: "Are you sure you would like to delete this wallet?", comment: nil) }

      /// en translation: Any 'jailbreak' app can access Trust's keychain data and steal your wallet! Wipe this wallet immediately and restore on a secure device.
      ///
      /// Key: app.device.jailbreak.description
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var appDeviceJailbreakDescription: RswiftResources.StringResource { .init(key: "app.device.jailbreak.description", tableName: "Localizable", source: source, developmentValue: "Any 'jailbreak' app can access Trust's keychain data and steal your wallet! Wipe this wallet immediately and restore on a secure device.", comment: nil) }

      /// en translation: DEVICE SECURITY COMPROMISED
      ///
      /// Key: app.device.jailbreak.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var appDeviceJailbreakTitle: RswiftResources.StringResource { .init(key: "app.device.jailbreak.title", tableName: "Localizable", source: source, developmentValue: "DEVICE SECURITY COMPROMISED", comment: nil) }

      /// en translation: No bookmarks yet!
      ///
      /// Key: bookmarks.noBookmarks.label.title
      ///
      /// Locales: de, zh-Hans, ja, en, vi, th
      var bookmarksNoBookmarksLabelTitle: RswiftResources.StringResource { .init(key: "bookmarks.noBookmarks.label.title", tableName: "Localizable", source: source, developmentValue: "No bookmarks yet!", comment: nil) }

      /// en translation: Add Bookmark
      ///
      /// Key: browser.addbookmark.button.title
      ///
      /// Locales: de, zh-Hans, ja, en, vi, th
      var browserAddbookmarkButtonTitle: RswiftResources.StringResource { .init(key: "browser.addbookmark.button.title", tableName: "Localizable", source: source, developmentValue: "Add Bookmark", comment: nil) }

      /// en translation: Bookmarks
      ///
      /// Key: browser.bookmarks.button.title
      ///
      /// Locales: de, zh-Hans, ja, en, vi, th
      var browserBookmarksButtonTitle: RswiftResources.StringResource { .init(key: "browser.bookmarks.button.title", tableName: "Localizable", source: source, developmentValue: "Bookmarks", comment: nil) }

      /// en translation: Are you sure you would like to delete this bookmark?
      ///
      /// Key: browser.bookmarks.confirm.delete.title
      ///
      /// Locales: de, zh-Hans, ja, en, vi
      var browserBookmarksConfirmDeleteTitle: RswiftResources.StringResource { .init(key: "browser.bookmarks.confirm.delete.title", tableName: "Localizable", source: source, developmentValue: "Are you sure you would like to delete this bookmark?", comment: nil) }

      /// en translation: Bookmarks
      ///
      /// Key: browser.bookmarks.title
      ///
      /// Locales: de, zh-Hans, ja, en, vi
      var browserBookmarksTitle: RswiftResources.StringResource { .init(key: "browser.bookmarks.title", tableName: "Localizable", source: source, developmentValue: "Bookmarks", comment: nil) }

      /// en translation: Home
      ///
      /// Key: browser.home.button.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, th
      var browserHomeButtonTitle: RswiftResources.StringResource { .init(key: "browser.home.button.title", tableName: "Localizable", source: source, developmentValue: "Home", comment: nil) }

      /// en translation: QR Reader
      ///
      /// Key: browser.qrCode.button.title
      ///
      /// Locales: de, zh-Hans, ja, en
      var browserQrCodeButtonTitle: RswiftResources.StringResource { .init(key: "browser.qrCode.button.title", tableName: "Localizable", source: source, developmentValue: "QR Reader", comment: nil) }

      /// en translation: Reload
      ///
      /// Key: browser.reload.button.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var browserReloadButtonTitle: RswiftResources.StringResource { .init(key: "browser.reload.button.title", tableName: "Localizable", source: source, developmentValue: "Reload", comment: nil) }

      /// en translation: Share
      ///
      /// Key: browser.share.button.title
      ///
      /// Locales: de, zh-Hans, ja, en, vi
      var browserShareButtonTitle: RswiftResources.StringResource { .init(key: "browser.share.button.title", tableName: "Localizable", source: source, developmentValue: "Share", comment: nil) }

      /// en translation: Browser
      ///
      /// Key: browser.tabbar.item.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var browserTabbarItemTitle: RswiftResources.StringResource { .init(key: "browser.tabbar.item.title", tableName: "Localizable", source: source, developmentValue: "Browser", comment: nil) }

      /// en translation: Search or enter website url
      ///
      /// Key: browser.url.textfield.placeholder
      ///
      /// Locales: de, zh-Hans, ja, en, vi
      var browserUrlTextfieldPlaceholder: RswiftResources.StringResource { .init(key: "browser.url.textfield.placeholder", tableName: "Localizable", source: source, developmentValue: "Search or enter website url", comment: nil) }

      /// en translation: Explore on OpenSea.io
      ///
      /// Key: collectibles.discover.label.title
      ///
      /// Locales: de, zh-Hans, ja, en, vi, th
      var collectiblesDiscoverLabelTitle: RswiftResources.StringResource { .init(key: "collectibles.discover.label.title", tableName: "Localizable", source: source, developmentValue: "Explore on OpenSea.io", comment: nil) }

      /// en translation: Transaction Data (Optional)
      ///
      /// Key: configureTransaction.data.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var configureTransactionDataLabelTitle: RswiftResources.StringResource { .init(key: "configureTransaction.data.label.title", tableName: "Localizable", source: source, developmentValue: "Transaction Data (Optional)", comment: nil) }

      /// en translation: Data (Optional). %@
      ///
      /// Key: configureTransaction.dataField.label.title
      ///
      /// Locales: en
      var configureTransactionDataFieldLabelTitle: RswiftResources.StringResource1<String> { .init(key: "configureTransaction.dataField.label.title", tableName: "Localizable", source: source, developmentValue: "Data (Optional). %@", comment: nil) }

      /// en translation: Gas Fee is too high. Max available: %1$@ %2$@
      ///
      /// Key: configureTransaction.error.gasFeeHigh
      ///
      /// Locales: zh-Hans, ja, en, vi, th
      var configureTransactionErrorGasFeeHigh: RswiftResources.StringResource2<String, String> { .init(key: "configureTransaction.error.gasFeeHigh", tableName: "Localizable", source: source, developmentValue: "Gas Fee is too high. Max available: %1$@ %2$@", comment: nil) }

      /// en translation: The gas limit prevents smart contracts from consuming all your %@. We will try to calculate the gas limit automatically for you, but some smart contracts may require a custom gas limit.
      ///
      /// Key: configureTransaction.gasLimit.label.description
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var configureTransactionGasLimitLabelDescription: RswiftResources.StringResource1<String> { .init(key: "configureTransaction.gasLimit.label.description", tableName: "Localizable", source: source, developmentValue: "The gas limit prevents smart contracts from consuming all your %@. We will try to calculate the gas limit automatically for you, but some smart contracts may require a custom gas limit.", comment: nil) }

      /// en translation: Gas Limit
      ///
      /// Key: configureTransaction.gasLimit.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      var configureTransactionGasLimitLabelTitle: RswiftResources.StringResource { .init(key: "configureTransaction.gasLimit.label.title", tableName: "Localizable", source: source, developmentValue: "Gas Limit", comment: nil) }

      /// en translation: With a higher gas price, your transaction fee will be more expensive, but the %@ network will process your transaction faster.
      ///
      /// Key: configureTransaction.gasPrice.label.description
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var configureTransactionGasPriceLabelDescription: RswiftResources.StringResource1<String> { .init(key: "configureTransaction.gasPrice.label.description", tableName: "Localizable", source: source, developmentValue: "With a higher gas price, your transaction fee will be more expensive, but the %@ network will process your transaction faster.", comment: nil) }

      /// en translation: Gas Price
      ///
      /// Key: configureTransaction.gasPrice.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      var configureTransactionGasPriceLabelTitle: RswiftResources.StringResource { .init(key: "configureTransaction.gasPrice.label.title", tableName: "Localizable", source: source, developmentValue: "Gas Price", comment: nil) }

      /// en translation: Gas Price (Gwei)
      ///
      /// Key: configureTransaction.gasPriceGwei.label.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var configureTransactionGasPriceGweiLabelTitle: RswiftResources.StringResource { .init(key: "configureTransaction.gasPriceGwei.label.title", tableName: "Localizable", source: source, developmentValue: "Gas Price (Gwei)", comment: nil) }

      /// en translation: Nonce
      ///
      /// Key: configureTransaction.nonce.label.title
      ///
      /// Locales: de, zh-Hans, ja, en
      var configureTransactionNonceLabelTitle: RswiftResources.StringResource { .init(key: "configureTransaction.nonce.label.title", tableName: "Localizable", source: source, developmentValue: "Nonce", comment: nil) }

      /// en translation: Total network fee
      ///
      /// Key: configureTransaction.totalNetworkFee.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var configureTransactionTotalNetworkFeeLabelTitle: RswiftResources.StringResource { .init(key: "configureTransaction.totalNetworkFee.label.title", tableName: "Localizable", source: source, developmentValue: "Total network fee", comment: nil) }

      /// en translation: Confirm
      ///
      /// Key: confirmPayment.confirm.button.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      var confirmPaymentConfirmButtonTitle: RswiftResources.StringResource { .init(key: "confirmPayment.confirm.button.title", tableName: "Localizable", source: source, developmentValue: "Confirm", comment: nil) }

      /// en translation: Data
      ///
      /// Key: confirmPayment.data.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var confirmPaymentDataLabelTitle: RswiftResources.StringResource { .init(key: "confirmPayment.data.label.title", tableName: "Localizable", source: source, developmentValue: "Data", comment: nil) }

      /// en translation: From
      ///
      /// Key: confirmPayment.from.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      var confirmPaymentFromLabelTitle: RswiftResources.StringResource { .init(key: "confirmPayment.from.label.title", tableName: "Localizable", source: source, developmentValue: "From", comment: nil) }

      /// en translation: Network Fee
      ///
      /// Key: confirmPayment.gasFee.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      var confirmPaymentGasFeeLabelTitle: RswiftResources.StringResource { .init(key: "confirmPayment.gasFee.label.title", tableName: "Localizable", source: source, developmentValue: "Network Fee", comment: nil) }

      /// en translation: Gas Limit
      ///
      /// Key: confirmPayment.gasLimit.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      var confirmPaymentGasLimitLabelTitle: RswiftResources.StringResource { .init(key: "confirmPayment.gasLimit.label.title", tableName: "Localizable", source: source, developmentValue: "Gas Limit", comment: nil) }

      /// en translation: Gas Price
      ///
      /// Key: confirmPayment.gasPrice.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      var confirmPaymentGasPriceLabelTitle: RswiftResources.StringResource { .init(key: "confirmPayment.gasPrice.label.title", tableName: "Localizable", source: source, developmentValue: "Gas Price", comment: nil) }

      /// en translation: Max Total
      ///
      /// Key: confirmPayment.maxTotal.label.title
      ///
      /// Locales: de, zh-Hans, ja, en, vi, th
      var confirmPaymentMaxTotalLabelTitle: RswiftResources.StringResource { .init(key: "confirmPayment.maxTotal.label.title", tableName: "Localizable", source: source, developmentValue: "Max Total", comment: nil) }

      /// en translation: To
      ///
      /// Key: confirmPayment.to.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      var confirmPaymentToLabelTitle: RswiftResources.StringResource { .init(key: "confirmPayment.to.label.title", tableName: "Localizable", source: source, developmentValue: "To", comment: nil) }

      /// en translation: via Changelly
      ///
      /// Key: deposit.buy.button.changelly.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var depositBuyButtonChangellyTitle: RswiftResources.StringResource { .init(key: "deposit.buy.button.changelly.title", tableName: "Localizable", source: source, developmentValue: "via Changelly", comment: nil) }

      /// en translation: via Coinbase
      ///
      /// Key: deposit.buy.button.coinbase.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var depositBuyButtonCoinbaseTitle: RswiftResources.StringResource { .init(key: "deposit.buy.button.coinbase.title", tableName: "Localizable", source: source, developmentValue: "via Coinbase", comment: nil) }

      /// en translation: via ShapeShift (Crypto only)
      ///
      /// Key: deposit.buy.button.shapeShift.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var depositBuyButtonShapeShiftTitle: RswiftResources.StringResource { .init(key: "deposit.buy.button.shapeShift.title", tableName: "Localizable", source: source, developmentValue: "via ShapeShift (Crypto only)", comment: nil) }

      /// en translation: How would you like to buy?
      ///
      /// Key: deposit.buy.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var depositBuyLabelTitle: RswiftResources.StringResource { .init(key: "deposit.buy.label.title", tableName: "Localizable", source: source, developmentValue: "How would you like to buy?", comment: nil) }

      /// en translation: Search tokens
      ///
      /// Key: editTokens.searchBar.placeholder.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var editTokensSearchBarPlaceholderTitle: RswiftResources.StringResource { .init(key: "editTokens.searchBar.placeholder.title", tableName: "Localizable", source: source, developmentValue: "Search tokens", comment: nil) }

      /// en translation: No Collectibles Found
      ///
      /// Key: emptyView.noNonTokens.label.title
      ///
      /// Locales: de, zh-Hans, ja, en, vi
      var emptyViewNoNonTokensLabelTitle: RswiftResources.StringResource { .init(key: "emptyView.noNonTokens.label.title", tableName: "Localizable", source: source, developmentValue: "No Collectibles Found", comment: nil) }

      /// en translation: You haven't received any tokens yet!
      ///
      /// Key: emptyView.noTokens.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var emptyViewNoTokensLabelTitle: RswiftResources.StringResource { .init(key: "emptyView.noTokens.label.title", tableName: "Localizable", source: source, developmentValue: "You haven't received any tokens yet!", comment: nil) }

      /// en translation: Confirm Password
      ///
      /// Key: enterPassword.confirmPassword.textField.placeholder
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var enterPasswordConfirmPasswordTextFieldPlaceholder: RswiftResources.StringResource { .init(key: "enterPassword.confirmPassword.textField.placeholder", tableName: "Localizable", source: source, developmentValue: "Confirm Password", comment: nil) }

      /// en translation: Backup Password
      ///
      /// Key: enterPassword.navigation.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var enterPasswordNavigationTitle: RswiftResources.StringResource { .init(key: "enterPassword.navigation.title", tableName: "Localizable", source: source, developmentValue: "Backup Password", comment: nil) }

      /// en translation: Password used to encrypt your backup file to keep it secure!
      ///
      /// Key: enterPassword.password.header.placeholder
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var enterPasswordPasswordHeaderPlaceholder: RswiftResources.StringResource { .init(key: "enterPassword.password.header.placeholder", tableName: "Localizable", source: source, developmentValue: "Password used to encrypt your backup file to keep it secure!", comment: nil) }

      /// en translation: Password
      ///
      /// Key: enterPassword.password.textField.placeholder
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, th
      var enterPasswordPasswordTextFieldPlaceholder: RswiftResources.StringResource { .init(key: "enterPassword.password.textField.placeholder", tableName: "Localizable", source: source, developmentValue: "Password", comment: nil) }

      /// en translation: Passwords don't match!
      ///
      /// Key: enterPassword.passwordNoMatch.error
      ///
      /// Locales: de, zh-Hans, ja, en, vi
      var enterPasswordPasswordNoMatchError: RswiftResources.StringResource { .init(key: "enterPassword.passwordNoMatch.error", tableName: "Localizable", source: source, developmentValue: "Passwords don't match!", comment: nil) }

      /// en translation: Something went wrong... Try again.
      ///
      /// Key: errorView.description.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var errorViewDescriptionLabelTitle: RswiftResources.StringResource { .init(key: "errorView.description.label.title", tableName: "Localizable", source: source, developmentValue: "Something went wrong... Try again.", comment: nil) }

      /// en translation: Backup Wallet
      ///
      /// Key: export.backup.button.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var exportBackupButtonTitle: RswiftResources.StringResource { .init(key: "export.backup.button.title", tableName: "Localizable", source: source, developmentValue: "Backup Wallet", comment: nil) }

      /// en translation: Since only you control your money, you must backup your wallet in case this app is deleted, or your device is lost.
      ///
      /// Key: export.controlYourMoney.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var exportControlYourMoneyLabelTitle: RswiftResources.StringResource { .init(key: "export.controlYourMoney.label.title", tableName: "Localizable", source: source, developmentValue: "Since only you control your money, you must backup your wallet in case this app is deleted, or your device is lost.", comment: nil) }

      /// en translation: Enter current password to export your wallet
      ///
      /// Key: export.enterCurrentPassword.textField.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var exportEnterCurrentPasswordTextFieldTitle: RswiftResources.StringResource { .init(key: "export.enterCurrentPassword.textField.title", tableName: "Localizable", source: source, developmentValue: "Enter current password to export your wallet", comment: nil) }

      /// en translation: Enter password to encrypt your wallet
      ///
      /// Key: export.enterPassword.textField.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var exportEnterPasswordTextFieldTitle: RswiftResources.StringResource { .init(key: "export.enterPassword.textField.title", tableName: "Localizable", source: source, developmentValue: "Enter password to encrypt your wallet", comment: nil) }

      /// en translation: Your wallet is never saved to cloud storage or standard device backups.
      ///
      /// Key: export.neverStored.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var exportNeverStoredLabelTitle: RswiftResources.StringResource { .init(key: "export.neverStored.label.title", tableName: "Localizable", source: source, developmentValue: "Your wallet is never saved to cloud storage or standard device backups.", comment: nil) }

      /// en translation: No backup, no %@.
      ///
      /// Key: export.noBackup.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var exportNoBackupLabelTitle: RswiftResources.StringResource1<String> { .init(key: "export.noBackup.label.title", tableName: "Localizable", source: source, developmentValue: "No backup, no %@.", comment: nil) }

      /// en translation: No Private Key for wallet
      ///
      /// Key: export.noKPrivateKey.label.title
      ///
      /// Locales: de, zh-Hans, ja, en, vi
      var exportNoKPrivateKeyLabelTitle: RswiftResources.StringResource { .init(key: "export.noKPrivateKey.label.title", tableName: "Localizable", source: source, developmentValue: "No Private Key for wallet", comment: nil) }

      /// en translation: Preparing backup options...
      ///
      /// Key: export.presentBackupOptions.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var exportPresentBackupOptionsLabelTitle: RswiftResources.StringResource { .init(key: "export.presentBackupOptions.label.title", tableName: "Localizable", source: source, developmentValue: "Preparing backup options...", comment: nil) }

      /// en translation: Export Private Key
      ///
      /// Key: export.privateKey.navigation.title
      ///
      /// Locales: de, zh-Hans, ja, en, vi
      var exportPrivateKeyNavigationTitle: RswiftResources.StringResource { .init(key: "export.privateKey.navigation.title", tableName: "Localizable", source: source, developmentValue: "Export Private Key", comment: nil) }

      /// en translation: Generating QR Code
      ///
      /// Key: export.qrCode.loading.label
      ///
      /// Locales: de, zh-Hans, ja, en, vi
      var exportQrCodeLoadingLabel: RswiftResources.StringResource { .init(key: "export.qrCode.loading.label", tableName: "Localizable", source: source, developmentValue: "Generating QR Code", comment: nil) }

      /// en translation: Hold to Reveal
      ///
      /// Key: export.reveal.button.title
      ///
      /// Locales: de, zh-Hans, ja, en, vi
      var exportRevealButtonTitle: RswiftResources.StringResource { .init(key: "export.reveal.button.title", tableName: "Localizable", source: source, developmentValue: "Hold to Reveal", comment: nil) }

      /// en translation: Do it later
      ///
      /// Key: export.skip.button.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var exportSkipButtonTitle: RswiftResources.StringResource { .init(key: "export.skip.button.title", tableName: "Localizable", source: source, developmentValue: "Do it later", comment: nil) }

      /// en translation: Export at your own risk!
      ///
      /// Key: export.warning.private.key
      ///
      /// Locales: de, zh-Hans, ja, en, vi
      var exportWarningPrivateKey: RswiftResources.StringResource { .init(key: "export.warning.private.key", tableName: "Localizable", source: source, developmentValue: "Export at your own risk!", comment: nil) }

      /// en translation: Anyone with your Private Key will have FULL access to your wallet!
      ///
      /// Key: export.warningTwo.private.key
      ///
      /// Locales: de, zh-Hans, ja, en, vi
      var exportWarningTwoPrivateKey: RswiftResources.StringResource { .init(key: "export.warningTwo.private.key", tableName: "Localizable", source: source, developmentValue: "Anyone with your Private Key will have FULL access to your wallet!", comment: nil) }

      /// en translation: No history yet!
      ///
      /// Key: history.noHistory.label.title
      ///
      /// Locales: de, zh-Hans, ja, en, ru
      var historyNoHistoryLabelTitle: RswiftResources.StringResource { .init(key: "history.noHistory.label.title", tableName: "Localizable", source: source, developmentValue: "No history yet!", comment: nil) }

      /// en translation: Import Wallet
      ///
      /// Key: import.navigation.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var importNavigationTitle: RswiftResources.StringResource { .init(key: "import.navigation.title", tableName: "Localizable", source: source, developmentValue: "Import Wallet", comment: nil) }

      /// en translation: Words separated by a space. (Usually contains 12 words)
      ///
      /// Key: import.wallet.mnemonic.placeholder
      ///
      /// Locales: de, zh-Hans, ja, en, vi
      var importWalletMnemonicPlaceholder: RswiftResources.StringResource { .init(key: "import.wallet.mnemonic.placeholder", tableName: "Localizable", source: source, developmentValue: "Words separated by a space. (Usually contains 12 words)", comment: nil) }

      /// en translation: %@ TrustCore.Address
      ///
      /// Key: import.wallet.watch.placeholder
      ///
      /// Locales: de, zh-Hans, ja, en, vi
      var importWalletWatchPlaceholder: RswiftResources.StringResource1<String> { .init(key: "import.wallet.watch.placeholder", tableName: "Localizable", source: source, developmentValue: "%@ TrustCore.Address", comment: nil) }

      /// en translation: iCloud/Dropbox/Google Drive
      ///
      /// Key: importWallet.import.alertSheet.option.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var importWalletImportAlertSheetOptionTitle: RswiftResources.StringResource { .init(key: "importWallet.import.alertSheet.option.title", tableName: "Localizable", source: source, developmentValue: "iCloud/Dropbox/Google Drive", comment: nil) }

      /// en translation: Import Wallet Options
      ///
      /// Key: importWallet.import.alertSheet.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var importWalletImportAlertSheetTitle: RswiftResources.StringResource { .init(key: "importWallet.import.alertSheet.title", tableName: "Localizable", source: source, developmentValue: "Import Wallet Options", comment: nil) }

      /// en translation: Import
      ///
      /// Key: importWallet.import.button.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var importWalletImportButtonTitle: RswiftResources.StringResource { .init(key: "importWallet.import.button.title", tableName: "Localizable", source: source, developmentValue: "Import", comment: nil) }

      /// en translation: Importing wallet...
      ///
      /// Key: importWallet.importingIndicator.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var importWalletImportingIndicatorLabelTitle: RswiftResources.StringResource { .init(key: "importWallet.importingIndicator.label.title", tableName: "Localizable", source: source, developmentValue: "Importing wallet...", comment: nil) }

      /// en translation: Loading %@
      ///
      /// Key: loading.dots
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var loadingDots: RswiftResources.StringResource1<String> { .init(key: "loading.dots", tableName: "Localizable", source: source, developmentValue: "Loading %@", comment: nil) }

      /// en translation: Please re-enter your passcode
      ///
      /// Key: lock.create.passcode.view.model.confirm
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var lockCreatePasscodeViewModelConfirm: RswiftResources.StringResource { .init(key: "lock.create.passcode.view.model.confirm", tableName: "Localizable", source: source, developmentValue: "Please re-enter your passcode", comment: nil) }

      /// en translation: Enter a new passcode
      ///
      /// Key: lock.create.passcode.view.model.initial
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var lockCreatePasscodeViewModelInitial: RswiftResources.StringResource { .init(key: "lock.create.passcode.view.model.initial", tableName: "Localizable", source: source, developmentValue: "Enter a new passcode", comment: nil) }

      /// en translation: Set Passcode
      ///
      /// Key: lock.create.passcode.view.model.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var lockCreatePasscodeViewModelTitle: RswiftResources.StringResource { .init(key: "lock.create.passcode.view.model.title", tableName: "Localizable", source: source, developmentValue: "Set Passcode", comment: nil) }

      /// en translation: Incorrect passcode. You have %li attempts left.
      ///
      /// Key: lock.enter.passcode.view.model.incorrect.passcode
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var lockEnterPasscodeViewModelIncorrectPasscode: RswiftResources.StringResource1<Int> { .init(key: "lock.enter.passcode.view.model.incorrect.passcode", tableName: "Localizable", source: source, developmentValue: "Incorrect passcode. You have %li attempts left.", comment: nil) }

      /// en translation: Enter your passcode.
      ///
      /// Key: lock.enter.passcode.view.model.initial
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var lockEnterPasscodeViewModelInitial: RswiftResources.StringResource { .init(key: "lock.enter.passcode.view.model.initial", tableName: "Localizable", source: source, developmentValue: "Enter your passcode.", comment: nil) }

      /// en translation: Logging in with Touch ID
      ///
      /// Key: lock.enter.passcode.view.model.touch.id
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var lockEnterPasscodeViewModelTouchId: RswiftResources.StringResource { .init(key: "lock.enter.passcode.view.model.touch.id", tableName: "Localizable", source: source, developmentValue: "Logging in with Touch ID", comment: nil) }

      /// en translation: Try after 1 minute.
      ///
      /// Key: lock.enter.passcode.view.model.try.after.one.minute
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, th
      var lockEnterPasscodeViewModelTryAfterOneMinute: RswiftResources.StringResource { .init(key: "lock.enter.passcode.view.model.try.after.one.minute", tableName: "Localizable", source: source, developmentValue: "Try after 1 minute.", comment: nil) }

      /// en translation: Open on OpenSea.io
      ///
      /// Key: nft.details.external.button.title
      ///
      /// Locales: de, zh-Hans, ja, en
      var nftDetailsExternalButtonTitle: RswiftResources.StringResource { .init(key: "nft.details.external.button.title", tableName: "Localizable", source: source, developmentValue: "Open on OpenSea.io", comment: nil) }

      /// en translation: Open on %@
      ///
      /// Key: nft.details.internal.button.title
      ///
      /// Locales: de, zh-Hans, ja, en
      var nftDetailsInternalButtonTitle: RswiftResources.StringResource1<String> { .init(key: "nft.details.internal.button.title", tableName: "Localizable", source: source, developmentValue: "Open on %@", comment: nil) }

      /// en translation: Powered by OpenSea
      ///
      /// Key: nft.poweredBy.label.text
      ///
      /// Locales: de, zh-Hans, ja, en
      var nftPoweredByLabelText: RswiftResources.StringResource { .init(key: "nft.poweredBy.label.text", tableName: "Localizable", source: source, developmentValue: "Powered by OpenSea", comment: nil) }

      /// en translation: Write this down, and keep it private and secure. You won't be able to restore your wallet if you lose this!
      ///
      /// Key: passphrase.remember.label.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      var passphraseRememberLabelTitle: RswiftResources.StringResource { .init(key: "passphrase.remember.label.title", tableName: "Localizable", source: source, developmentValue: "Write this down, and keep it private and secure. You won't be able to restore your wallet if you lose this!", comment: nil) }

      /// en translation: Recovery Phrase
      ///
      /// Key: recoveryPhrase.navigation.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      var recoveryPhraseNavigationTitle: RswiftResources.StringResource { .init(key: "recoveryPhrase.navigation.title", tableName: "Localizable", source: source, developmentValue: "Recovery Phrase", comment: nil) }

      /// en translation: TrustCore.Address copied
      ///
      /// Key: request.addressCopied.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var requestAddressCopiedTitle: RswiftResources.StringResource { .init(key: "request.addressCopied.title", tableName: "Localizable", source: source, developmentValue: "TrustCore.Address copied", comment: nil) }

      /// en translation: Copy wallet address
      ///
      /// Key: request.copyWallet.button.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var requestCopyWalletButtonTitle: RswiftResources.StringResource { .init(key: "request.copyWallet.button.title", tableName: "Localizable", source: source, developmentValue: "Copy wallet address", comment: nil) }

      /// en translation: My %1$@ address is: %2$@
      ///
      /// Key: request.myAddressIs.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var requestMyAddressIsLabelTitle: RswiftResources.StringResource2<String, String> { .init(key: "request.myAddressIs.label.title", tableName: "Localizable", source: source, developmentValue: "My %1$@ address is: %2$@", comment: nil) }

      /// en translation: My Public %@ wallet address
      ///
      /// Key: request.myPublicaddress.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var requestMyPublicaddressLabelTitle: RswiftResources.StringResource1<String> { .init(key: "request.myPublicaddress.label.title", tableName: "Localizable", source: source, developmentValue: "My Public %@ wallet address", comment: nil) }

      /// en translation: Copy Transaction ID
      ///
      /// Key: send.action.copy.transaction.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var sendActionCopyTransactionTitle: RswiftResources.StringResource { .init(key: "send.action.copy.transaction.title", tableName: "Localizable", source: source, developmentValue: "Copy Transaction ID", comment: nil) }

      /// en translation: Amount
      ///
      /// Key: send.amount.textField.placeholder
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var sendAmountTextFieldPlaceholder: RswiftResources.StringResource { .init(key: "send.amount.textField.placeholder", tableName: "Localizable", source: source, developmentValue: "Amount", comment: nil) }

      /// en translation: Empty ClipBoard
      ///
      /// Key: send.error.emptyClipBoard
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var sendErrorEmptyClipBoard: RswiftResources.StringResource { .init(key: "send.error.emptyClipBoard", tableName: "Localizable", source: source, developmentValue: "Empty ClipBoard", comment: nil) }

      /// en translation: Invalid TrustCore.Address
      ///
      /// Key: send.error.invalidAddress
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var sendErrorInvalidAddress: RswiftResources.StringResource { .init(key: "send.error.invalidAddress", tableName: "Localizable", source: source, developmentValue: "Invalid TrustCore.Address", comment: nil) }

      /// en translation: Invalid Amount
      ///
      /// Key: send.error.invalidAmount
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var sendErrorInvalidAmount: RswiftResources.StringResource { .init(key: "send.error.invalidAmount", tableName: "Localizable", source: source, developmentValue: "Invalid Amount", comment: nil) }

      /// en translation: Wrong Input
      ///
      /// Key: send.error.wrongInput
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var sendErrorWrongInput: RswiftResources.StringResource { .init(key: "send.error.wrongInput", tableName: "Localizable", source: source, developmentValue: "Wrong Input", comment: nil) }

      /// en translation: Max
      ///
      /// Key: send.max.button.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var sendMaxButtonTitle: RswiftResources.StringResource { .init(key: "send.max.button.title", tableName: "Localizable", source: source, developmentValue: "Max", comment: nil) }

      /// en translation: Paste
      ///
      /// Key: send.paste.button.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var sendPasteButtonTitle: RswiftResources.StringResource { .init(key: "send.paste.button.title", tableName: "Localizable", source: source, developmentValue: "Paste", comment: nil) }

      /// en translation: Recipient TrustCore.Address
      ///
      /// Key: send.recipientAddress.textField.placeholder
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var sendRecipientAddressTextFieldPlaceholder: RswiftResources.StringResource { .init(key: "send.recipientAddress.textField.placeholder", tableName: "Localizable", source: source, developmentValue: "Recipient TrustCore.Address", comment: nil) }

      /// en translation: Wait for the transaction to be mined on the network to see details.
      ///
      /// Key: sent.transaction.message
      ///
      /// Locales: de, zh-Hans, ja, en, vi, ru, fr, th
      var sentTransactionMessage: RswiftResources.StringResource { .init(key: "sent.transaction.message", tableName: "Localizable", source: source, developmentValue: "Wait for the transaction to be mined on the network to see details.", comment: nil) }

      /// en translation: Transaction Sent!
      ///
      /// Key: sent.transaction.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, ru, fr, th
      var sentTransactionTitle: RswiftResources.StringResource { .init(key: "sent.transaction.title", tableName: "Localizable", source: source, developmentValue: "Transaction Sent!", comment: nil) }

      /// en translation: Allow Push Notifications
      ///
      /// Key: settings.allowPushNotifications.button.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var settingsAllowPushNotificationsButtonTitle: RswiftResources.StringResource { .init(key: "settings.allowPushNotifications.button.title", tableName: "Localizable", source: source, developmentValue: "Allow Push Notifications", comment: nil) }

      /// en translation: Passcode
      ///
      /// Key: settings.biometricsDisabled.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var settingsBiometricsDisabledLabelTitle: RswiftResources.StringResource { .init(key: "settings.biometricsDisabled.label.title", tableName: "Localizable", source: source, developmentValue: "Passcode", comment: nil) }

      /// en translation: Passcode / %@
      ///
      /// Key: settings.biometricsEnabled.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var settingsBiometricsEnabledLabelTitle: RswiftResources.StringResource1<String> { .init(key: "settings.biometricsEnabled.label.title", tableName: "Localizable", source: source, developmentValue: "Passcode / %@", comment: nil) }

      /// en translation: Community
      ///
      /// Key: settings.community.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var settingsCommunityLabelTitle: RswiftResources.StringResource { .init(key: "settings.community.label.title", tableName: "Localizable", source: source, developmentValue: "Community", comment: nil) }

      /// en translation: All
      ///
      /// Key: settings.currency.all.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var settingsCurrencyAllLabelTitle: RswiftResources.StringResource { .init(key: "settings.currency.all.label.title", tableName: "Localizable", source: source, developmentValue: "All", comment: nil) }

      /// en translation: Currency
      ///
      /// Key: settings.currency.button.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var settingsCurrencyButtonTitle: RswiftResources.StringResource { .init(key: "settings.currency.button.title", tableName: "Localizable", source: source, developmentValue: "Currency", comment: nil) }

      /// en translation: Popular
      ///
      /// Key: settings.currency.popular.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var settingsCurrencyPopularLabelTitle: RswiftResources.StringResource { .init(key: "settings.currency.popular.label.title", tableName: "Localizable", source: source, developmentValue: "Popular", comment: nil) }

      /// en translation: Custom Network
      ///
      /// Key: settings.customNetwork.navigation.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var settingsCustomNetworkNavigationTitle: RswiftResources.StringResource { .init(key: "settings.customNetwork.navigation.title", tableName: "Localizable", source: source, developmentValue: "Custom Network", comment: nil) }

      /// en translation: DApps Browser
      ///
      /// Key: settings.dappbroser.button.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var settingsDappbroserButtonTitle: RswiftResources.StringResource { .init(key: "settings.dappbroser.button.title", tableName: "Localizable", source: source, developmentValue: "DApps Browser", comment: nil) }

      /// en translation: Donate
      ///
      /// Key: settings.donate.button.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var settingsDonateButtonTitle: RswiftResources.StringResource { .init(key: "settings.donate.button.title", tableName: "Localizable", source: source, developmentValue: "Donate", comment: nil) }

      /// en translation: Email Us
      ///
      /// Key: settings.emailUs.button.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var settingsEmailUsButtonTitle: RswiftResources.StringResource { .init(key: "settings.emailUs.button.title", tableName: "Localizable", source: source, developmentValue: "Email Us", comment: nil) }

      /// en translation: Email Us (Read FAQ first)
      ///
      /// Key: settings.emailUsReadFAQ.button.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var settingsEmailUsReadFAQButtonTitle: RswiftResources.StringResource { .init(key: "settings.emailUsReadFAQ.button.title", tableName: "Localizable", source: source, developmentValue: "Email Us (Read FAQ first)", comment: nil) }

      /// en translation: Failed to send email. Make sure you have Mail app installed.
      ///
      /// Key: settings.error.failedToSendEmail
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var settingsErrorFailedToSendEmail: RswiftResources.StringResource { .init(key: "settings.error.failedToSendEmail", tableName: "Localizable", source: source, developmentValue: "Failed to send email. Make sure you have Mail app installed.", comment: nil) }

      /// en translation: FAQ
      ///
      /// Key: settings.faq.button.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, th
      var settingsFaqButtonTitle: RswiftResources.StringResource { .init(key: "settings.faq.button.title", tableName: "Localizable", source: source, developmentValue: "FAQ", comment: nil) }

      /// en translation: Trust Feedback
      ///
      /// Key: settings.feedback.email.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var settingsFeedbackEmailTitle: RswiftResources.StringResource { .init(key: "settings.feedback.email.title", tableName: "Localizable", source: source, developmentValue: "Trust Feedback", comment: nil) }

      /// en translation: Join Community
      ///
      /// Key: settings.joinCommunity.label.title
      ///
      /// Locales: de, zh-Hans, ja, en, vi
      var settingsJoinCommunityLabelTitle: RswiftResources.StringResource { .init(key: "settings.joinCommunity.label.title", tableName: "Localizable", source: source, developmentValue: "Join Community", comment: nil) }

      /// en translation: Learn More
      ///
      /// Key: settings.learnMore.label.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var settingsLearnMoreLabelTitle: RswiftResources.StringResource { .init(key: "settings.learnMore.label.title", tableName: "Localizable", source: source, developmentValue: "Learn More", comment: nil) }

      /// en translation: Settings
      ///
      /// Key: settings.navigation.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var settingsNavigationTitle: RswiftResources.StringResource { .init(key: "settings.navigation.title", tableName: "Localizable", source: source, developmentValue: "Settings", comment: nil) }

      /// en translation: Network
      ///
      /// Key: settings.network.button.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var settingsNetworkButtonTitle: RswiftResources.StringResource { .init(key: "settings.network.button.title", tableName: "Localizable", source: source, developmentValue: "Network", comment: nil) }

      /// en translation: Custom
      ///
      /// Key: settings.network.custom.label.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var settingsNetworkCustomLabelTitle: RswiftResources.StringResource { .init(key: "settings.network.custom.label.title", tableName: "Localizable", source: source, developmentValue: "Custom", comment: nil) }

      /// en translation: Test
      ///
      /// Key: settings.network.test.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      var settingsNetworkTestLabelTitle: RswiftResources.StringResource { .init(key: "settings.network.test.label.title", tableName: "Localizable", source: source, developmentValue: "Test", comment: nil) }

      /// en translation: Don't Show Again
      ///
      /// Key: settings.network.test.warnning.dont.show.again
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, ru, fr, th
      var settingsNetworkTestWarnningDontShowAgain: RswiftResources.StringResource { .init(key: "settings.network.test.warnning.dont.show.again", tableName: "Localizable", source: source, developmentValue: "Don't Show Again", comment: nil) }

      /// en translation: You are switching to a test network where transactions are for testing purpose only
      ///
      /// Key: settings.network.test.warnning.message
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, ru, fr, th
      var settingsNetworkTestWarnningMessage: RswiftResources.StringResource { .init(key: "settings.network.test.warnning.message", tableName: "Localizable", source: source, developmentValue: "You are switching to a test network where transactions are for testing purpose only", comment: nil) }

      /// en translation: Warning
      ///
      /// Key: settings.network.test.warnning.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, ru, fr, th
      var settingsNetworkTestWarnningTitle: RswiftResources.StringResource { .init(key: "settings.network.test.warnning.title", tableName: "Localizable", source: source, developmentValue: "Warning", comment: nil) }

      /// en translation: Open Source Development
      ///
      /// Key: settings.openSourceDevelopment.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var settingsOpenSourceDevelopmentLabelTitle: RswiftResources.StringResource { .init(key: "settings.openSourceDevelopment.label.title", tableName: "Localizable", source: source, developmentValue: "Open Source Development", comment: nil) }

      /// en translation: Show Tokens on Launch
      ///
      /// Key: settings.preferences.button.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var settingsPreferencesButtonTitle: RswiftResources.StringResource { .init(key: "settings.preferences.button.title", tableName: "Localizable", source: source, developmentValue: "Show Tokens on Launch", comment: nil) }

      /// en translation: Preferences
      ///
      /// Key: settings.preferences.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var settingsPreferencesTitle: RswiftResources.StringResource { .init(key: "settings.preferences.title", tableName: "Localizable", source: source, developmentValue: "Preferences", comment: nil) }

      /// en translation: Privacy Policy
      ///
      /// Key: settings.privacyPolicy.button.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var settingsPrivacyPolicyButtonTitle: RswiftResources.StringResource { .init(key: "settings.privacyPolicy.button.title", tableName: "Localizable", source: source, developmentValue: "Privacy Policy", comment: nil) }

      /// en translation: Airdrops from partners
      ///
      /// Key: settings.pushNotifications.airdrop.button.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var settingsPushNotificationsAirdropButtonTitle: RswiftResources.StringResource { .init(key: "settings.pushNotifications.airdrop.button.title", tableName: "Localizable", source: source, developmentValue: "Airdrops from partners", comment: nil) }

      /// en translation: Occasionally you will receive offers to participate in airdrops from our official partners.
      ///
      /// Key: settings.pushNotifications.airdrop.footer
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var settingsPushNotificationsAirdropFooter: RswiftResources.StringResource { .init(key: "settings.pushNotifications.airdrop.footer", tableName: "Localizable", source: source, developmentValue: "Occasionally you will receive offers to participate in airdrops from our official partners.", comment: nil) }

      /// en translation: You will be notified for sent and received transactions.
      ///
      /// Key: settings.pushNotifications.allowPushNotifications.footer
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var settingsPushNotificationsAllowPushNotificationsFooter: RswiftResources.StringResource { .init(key: "settings.pushNotifications.allowPushNotifications.footer", tableName: "Localizable", source: source, developmentValue: "You will be notified for sent and received transactions.", comment: nil) }

      /// en translation: Push Notifications
      ///
      /// Key: settings.pushNotifications.button.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var settingsPushNotificationsButtonTitle: RswiftResources.StringResource { .init(key: "settings.pushNotifications.button.title", tableName: "Localizable", source: source, developmentValue: "Push Notifications", comment: nil) }

      /// en translation: Sent and Receive
      ///
      /// Key: settings.pushNotifications.payment.button.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var settingsPushNotificationsPaymentButtonTitle: RswiftResources.StringResource { .init(key: "settings.pushNotifications.payment.button.title", tableName: "Localizable", source: source, developmentValue: "Sent and Receive", comment: nil) }

      /// en translation: Push Notifications
      ///
      /// Key: settings.pushNotifications.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var settingsPushNotificationsTitle: RswiftResources.StringResource { .init(key: "settings.pushNotifications.title", tableName: "Localizable", source: source, developmentValue: "Push Notifications", comment: nil) }

      /// en translation: Rate Us on App Store
      ///
      /// Key: settings.rateUsAppStore.button.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var settingsRateUsAppStoreButtonTitle: RswiftResources.StringResource { .init(key: "settings.rateUsAppStore.button.title", tableName: "Localizable", source: source, developmentValue: "Rate Us on App Store", comment: nil) }

      /// en translation: Report a Bug
      ///
      /// Key: settings.reportBug.button.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var settingsReportBugButtonTitle: RswiftResources.StringResource { .init(key: "settings.reportBug.button.title", tableName: "Localizable", source: source, developmentValue: "Report a Bug", comment: nil) }

      /// en translation: Security
      ///
      /// Key: settings.security.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var settingsSecurityLabelTitle: RswiftResources.StringResource { .init(key: "settings.security.label.title", tableName: "Localizable", source: source, developmentValue: "Security", comment: nil) }

      /// en translation: Share With Friends
      ///
      /// Key: settings.shareWithFriends.button.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      var settingsShareWithFriendsButtonTitle: RswiftResources.StringResource { .init(key: "settings.shareWithFriends.button.title", tableName: "Localizable", source: source, developmentValue: "Share With Friends", comment: nil) }

      /// en translation: Source Code
      ///
      /// Key: settings.sourceCode.button.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var settingsSourceCodeButtonTitle: RswiftResources.StringResource { .init(key: "settings.sourceCode.button.title", tableName: "Localizable", source: source, developmentValue: "Source Code", comment: nil) }

      /// en translation: Support
      ///
      /// Key: settings.support.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var settingsSupportLabelTitle: RswiftResources.StringResource { .init(key: "settings.support.label.title", tableName: "Localizable", source: source, developmentValue: "Support", comment: nil) }

      /// en translation: Support
      ///
      /// Key: settings.support.title
      ///
      /// Locales: de, zh-Hans, ja, en, vi, th
      var settingsSupportTitle: RswiftResources.StringResource { .init(key: "settings.support.title", tableName: "Localizable", source: source, developmentValue: "Support", comment: nil) }

      /// en translation: Terms of Service
      ///
      /// Key: settings.termsOfService.button.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var settingsTermsOfServiceButtonTitle: RswiftResources.StringResource { .init(key: "settings.termsOfService.button.title", tableName: "Localizable", source: source, developmentValue: "Terms of Service", comment: nil) }

      /// en translation: Version
      ///
      /// Key: settings.version.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var settingsVersionLabelTitle: RswiftResources.StringResource { .init(key: "settings.version.label.title", tableName: "Localizable", source: source, developmentValue: "Version", comment: nil) }

      /// en translation: Balance: %@ ETH
      ///
      /// Key: settings.wallets.balance
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var settingsWalletsBalance: RswiftResources.StringResource1<String> { .init(key: "settings.wallets.balance", tableName: "Localizable", source: source, developmentValue: "Balance: %@ ETH", comment: nil) }

      /// en translation: Wallets
      ///
      /// Key: settings.wallets.button.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var settingsWalletsButtonTitle: RswiftResources.StringResource { .init(key: "settings.wallets.button.title", tableName: "Localizable", source: source, developmentValue: "Wallets", comment: nil) }

      /// en translation: Tokens will appear automagically. Tap + to add manually.
      ///
      /// Key: tokens.footer.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var tokensFooterLabelTitle: RswiftResources.StringResource { .init(key: "tokens.footer.label.title", tableName: "Localizable", source: source, developmentValue: "Tokens will appear automagically. Tap + to add manually.", comment: nil) }

      /// en translation: Tokens
      ///
      /// Key: tokens.navigation.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var tokensNavigationTitle: RswiftResources.StringResource { .init(key: "tokens.navigation.title", tableName: "Localizable", source: source, developmentValue: "Tokens", comment: nil) }

      /// en translation: Add Custom Token
      ///
      /// Key: tokens.newtoken.navigation.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var tokensNewtokenNavigationTitle: RswiftResources.StringResource { .init(key: "tokens.newtoken.navigation.title", tableName: "Localizable", source: source, developmentValue: "Add Custom Token", comment: nil) }

      /// en translation: Tokens
      ///
      /// Key: tokens.tabbar.item.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var tokensTabbarItemTitle: RswiftResources.StringResource { .init(key: "tokens.tabbar.item.title", tableName: "Localizable", source: source, developmentValue: "Tokens", comment: nil) }

      /// en translation: Edit Custom Token
      ///
      /// Key: tokens.token.edit.navigation.title
      ///
      /// Locales: de, zh-Hans, ja, en, vi
      var tokensTokenEditNavigationTitle: RswiftResources.StringResource { .init(key: "tokens.token.edit.navigation.title", tableName: "Localizable", source: source, developmentValue: "Edit Custom Token", comment: nil) }

      /// en translation: Block #
      ///
      /// Key: transaction.blockNumber.label.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var transactionBlockNumberLabelTitle: RswiftResources.StringResource { .init(key: "transaction.blockNumber.label.title", tableName: "Localizable", source: source, developmentValue: "Block #", comment: nil) }

      /// en translation: Error
      ///
      /// Key: transaction.cell.error.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var transactionCellErrorTitle: RswiftResources.StringResource { .init(key: "transaction.cell.error.title", tableName: "Localizable", source: source, developmentValue: "Error", comment: nil) }

      /// en translation: Failed
      ///
      /// Key: transaction.cell.failed.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var transactionCellFailedTitle: RswiftResources.StringResource { .init(key: "transaction.cell.failed.title", tableName: "Localizable", source: source, developmentValue: "Failed", comment: nil) }

      /// en translation: Pending
      ///
      /// Key: transaction.cell.pending.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, fr
      var transactionCellPendingTitle: RswiftResources.StringResource { .init(key: "transaction.cell.pending.title", tableName: "Localizable", source: source, developmentValue: "Pending", comment: nil) }

      /// en translation: Received
      ///
      /// Key: transaction.cell.received.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var transactionCellReceivedTitle: RswiftResources.StringResource { .init(key: "transaction.cell.received.title", tableName: "Localizable", source: source, developmentValue: "Received", comment: nil) }

      /// en translation: Receiving
      ///
      /// Key: transaction.cell.receiving.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var transactionCellReceivingTitle: RswiftResources.StringResource { .init(key: "transaction.cell.receiving.title", tableName: "Localizable", source: source, developmentValue: "Receiving", comment: nil) }

      /// en translation: Sending
      ///
      /// Key: transaction.cell.sending.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      var transactionCellSendingTitle: RswiftResources.StringResource { .init(key: "transaction.cell.sending.title", tableName: "Localizable", source: source, developmentValue: "Sending", comment: nil) }

      /// en translation: Sent
      ///
      /// Key: transaction.cell.sent.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      var transactionCellSentTitle: RswiftResources.StringResource { .init(key: "transaction.cell.sent.title", tableName: "Localizable", source: source, developmentValue: "Sent", comment: nil) }

      /// en translation: Transfer %@
      ///
      /// Key: transaction.cell.tokenTransfer.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var transactionCellTokenTransferTitle: RswiftResources.StringResource1<String> { .init(key: "transaction.cell.tokenTransfer.title", tableName: "Localizable", source: source, developmentValue: "Transfer %@", comment: nil) }

      /// en translation: Unknown
      ///
      /// Key: transaction.cell.unknown.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      var transactionCellUnknownTitle: RswiftResources.StringResource { .init(key: "transaction.cell.unknown.title", tableName: "Localizable", source: source, developmentValue: "Unknown", comment: nil) }

      /// en translation: Confirmation
      ///
      /// Key: transaction.confirmation.label.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var transactionConfirmationLabelTitle: RswiftResources.StringResource { .init(key: "transaction.confirmation.label.title", tableName: "Localizable", source: source, developmentValue: "Confirmation", comment: nil) }

      /// en translation: From
      ///
      /// Key: transaction.from.label.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var transactionFromLabelTitle: RswiftResources.StringResource { .init(key: "transaction.from.label.title", tableName: "Localizable", source: source, developmentValue: "From", comment: nil) }

      /// en translation: Gas Fee
      ///
      /// Key: transaction.gasFee.label.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var transactionGasFeeLabelTitle: RswiftResources.StringResource { .init(key: "transaction.gasFee.label.title", tableName: "Localizable", source: source, developmentValue: "Gas Fee", comment: nil) }

      /// en translation: Transaction #
      ///
      /// Key: transaction.id.label.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      var transactionIdLabelTitle: RswiftResources.StringResource { .init(key: "transaction.id.label.title", tableName: "Localizable", source: source, developmentValue: "Transaction #", comment: nil) }

      /// en translation: Recipient
      ///
      /// Key: transaction.recipient.label.title
      ///
      /// Locales: en
      var transactionRecipientLabelTitle: RswiftResources.StringResource { .init(key: "transaction.recipient.label.title", tableName: "Localizable", source: source, developmentValue: "Recipient", comment: nil) }

      /// en translation: Sender
      ///
      /// Key: transaction.sender.label.title
      ///
      /// Locales: en
      var transactionSenderLabelTitle: RswiftResources.StringResource { .init(key: "transaction.sender.label.title", tableName: "Localizable", source: source, developmentValue: "Sender", comment: nil) }

      /// en translation: Transaction time
      ///
      /// Key: transaction.time.label.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, th
      var transactionTimeLabelTitle: RswiftResources.StringResource { .init(key: "transaction.time.label.title", tableName: "Localizable", source: source, developmentValue: "Transaction time", comment: nil) }

      /// en translation: To
      ///
      /// Key: transaction.to.label.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, th
      var transactionToLabelTitle: RswiftResources.StringResource { .init(key: "transaction.to.label.title", tableName: "Localizable", source: source, developmentValue: "To", comment: nil) }

      /// en translation: Buy
      ///
      /// Key: transactions.deposit.button.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var transactionsDepositButtonTitle: RswiftResources.StringResource { .init(key: "transactions.deposit.button.title", tableName: "Localizable", source: source, developmentValue: "Buy", comment: nil) }

      /// en translation: My TrustCore.Address
      ///
      /// Key: transactions.myAddress.button.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var transactionsMyAddressButtonTitle: RswiftResources.StringResource { .init(key: "transactions.myAddress.button.title", tableName: "Localizable", source: source, developmentValue: "My TrustCore.Address", comment: nil) }

      /// en translation: No Transactions Yet!
      ///
      /// Key: transactions.noTransactions.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var transactionsNoTransactionsLabelTitle: RswiftResources.StringResource { .init(key: "transactions.noTransactions.label.title", tableName: "Localizable", source: source, developmentValue: "No Transactions Yet!", comment: nil) }

      /// en translation: Receive
      ///
      /// Key: transactions.receive.button.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, ru
      var transactionsReceiveButtonTitle: RswiftResources.StringResource { .init(key: "transactions.receive.button.title", tableName: "Localizable", source: source, developmentValue: "Receive", comment: nil) }

      /// en translation: Transactions
      ///
      /// Key: transactions.tabbar.item.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var transactionsTabbarItemTitle: RswiftResources.StringResource { .init(key: "transactions.tabbar.item.title", tableName: "Localizable", source: source, developmentValue: "Transactions", comment: nil) }

      /// en translation: Wallet
      ///
      /// Key: wallet.navigation.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var walletNavigationTitle: RswiftResources.StringResource { .init(key: "wallet.navigation.title", tableName: "Localizable", source: source, developmentValue: "Wallet", comment: nil) }

      /// en translation: HD Wallet
      ///
      /// Key: wallet.section.hdWallet.title
      ///
      /// Locales: de, zh-Hans, ja, en, vi
      var walletSectionHdWalletTitle: RswiftResources.StringResource { .init(key: "wallet.section.hdWallet.title", tableName: "Localizable", source: source, developmentValue: "HD Wallet", comment: nil) }

      /// en translation: Backup Keystore
      ///
      /// Key: wallets.backup.alertSheet.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var walletsBackupAlertSheetTitle: RswiftResources.StringResource { .init(key: "wallets.backup.alertSheet.title", tableName: "Localizable", source: source, developmentValue: "Backup Keystore", comment: nil) }

      /// en translation: Export Private Key
      ///
      /// Key: wallets.export.alertSheet.title
      ///
      /// Locales: de, zh-Hans, ja, en, vi
      var walletsExportAlertSheetTitle: RswiftResources.StringResource { .init(key: "wallets.export.alertSheet.title", tableName: "Localizable", source: source, developmentValue: "Export Private Key", comment: nil) }

      /// en translation: Wallets
      ///
      /// Key: wallets.navigation.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, ru, fr, th
      var walletsNavigationTitle: RswiftResources.StringResource { .init(key: "wallets.navigation.title", tableName: "Localizable", source: source, developmentValue: "Wallets", comment: nil) }

      /// en translation: CREATE WALLET
      ///
      /// Key: welcome.createWallet.button.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var welcomeCreateWalletButtonTitle: RswiftResources.StringResource { .init(key: "welcome.createWallet.button.title", tableName: "Localizable", source: source, developmentValue: "CREATE WALLET", comment: nil) }

      /// en translation: Support for ERC20 tokens by default. 
      ///
      /// Key: welcome.erc20.label.description
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var welcomeErc20LabelDescription: RswiftResources.StringResource { .init(key: "welcome.erc20.label.description", tableName: "Localizable", source: source, developmentValue: "Support for ERC20 tokens by default. ", comment: nil) }

      /// en translation: ERC20 Compatible
      ///
      /// Key: welcome.erc20.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var welcomeErc20LabelTitle: RswiftResources.StringResource { .init(key: "welcome.erc20.label.title", tableName: "Localizable", source: source, developmentValue: "ERC20 Compatible", comment: nil) }

      /// en translation: Code is open sourced (GPL-3.0 license) and fully audited.
      ///
      /// Key: welcome.fullyTransparent.label.description
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var welcomeFullyTransparentLabelDescription: RswiftResources.StringResource { .init(key: "welcome.fullyTransparent.label.description", tableName: "Localizable", source: source, developmentValue: "Code is open sourced (GPL-3.0 license) and fully audited.", comment: nil) }

      /// en translation: Fully transparent
      ///
      /// Key: welcome.fullyTransparent.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var welcomeFullyTransparentLabelTitle: RswiftResources.StringResource { .init(key: "welcome.fullyTransparent.label.title", tableName: "Localizable", source: source, developmentValue: "Fully transparent", comment: nil) }

      /// en translation: IMPORT WALLET
      ///
      /// Key: welcome.importWallet.button.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var welcomeImportWalletButtonTitle: RswiftResources.StringResource { .init(key: "welcome.importWallet.button.title", tableName: "Localizable", source: source, developmentValue: "IMPORT WALLET", comment: nil) }

      /// en translation: Private keys never leave your device.
      ///
      /// Key: welcome.privateAndSecure.label.description
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var welcomePrivateAndSecureLabelDescription: RswiftResources.StringResource { .init(key: "welcome.privateAndSecure.label.description", tableName: "Localizable", source: source, developmentValue: "Private keys never leave your device.", comment: nil) }

      /// en translation: Private & Secure
      ///
      /// Key: welcome.privateAndSecure.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var welcomePrivateAndSecureLabelTitle: RswiftResources.StringResource { .init(key: "welcome.privateAndSecure.label.title", tableName: "Localizable", source: source, developmentValue: "Private & Secure", comment: nil) }

      /// en translation: The fastest Ethereum wallet experience on mobile
      ///
      /// Key: welcome.ultraReliable.label.description
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var welcomeUltraReliableLabelDescription: RswiftResources.StringResource { .init(key: "welcome.ultraReliable.label.description", tableName: "Localizable", source: source, developmentValue: "The fastest Ethereum wallet experience on mobile", comment: nil) }

      /// en translation: Ultra Reliable
      ///
      /// Key: welcome.ultraReliable.label.title
      ///
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      var welcomeUltraReliableLabelTitle: RswiftResources.StringResource { .init(key: "welcome.ultraReliable.label.title", tableName: "Localizable", source: source, developmentValue: "Ultra Reliable", comment: nil) }

      /// en translation: Help us grow by sharing this app with your friends!
      ///
      /// Key: welldone.description.label.text
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      var welldoneDescriptionLabelText: RswiftResources.StringResource { .init(key: "welldone.description.label.text", tableName: "Localizable", source: source, developmentValue: "Help us grow by sharing this app with your friends!", comment: nil) }

      /// en translation: Thank you!
      ///
      /// Key: welldone.navigation.title
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi, th
      var welldoneNavigationTitle: RswiftResources.StringResource { .init(key: "welldone.navigation.title", tableName: "Localizable", source: source, developmentValue: "Thank you!", comment: nil) }

      /// en translation: Share
      ///
      /// Key: welldone.share.label.text
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      var welldoneShareLabelText: RswiftResources.StringResource { .init(key: "welldone.share.label.text", tableName: "Localizable", source: source, developmentValue: "Share", comment: nil) }

      /// en translation: Here is the app I use to store my ETH and ERC20 tokens.
      ///
      /// Key: welldone.viewmodel.sharing.text1
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      var welldoneViewmodelSharingText1: RswiftResources.StringResource { .init(key: "welldone.viewmodel.sharing.text1", tableName: "Localizable", source: source, developmentValue: "Here is the app I use to store my ETH and ERC20 tokens.", comment: nil) }

      /// en translation: Check out Trust - the wallet that lets me securely store my Ethereum and ERC20 tokens.
      ///
      /// Key: welldone.viewmodel.sharing.text2
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      var welldoneViewmodelSharingText2: RswiftResources.StringResource { .init(key: "welldone.viewmodel.sharing.text2", tableName: "Localizable", source: source, developmentValue: "Check out Trust - the wallet that lets me securely store my Ethereum and ERC20 tokens.", comment: nil) }

      /// en translation: I securely store Ethereum and ERC20 tokens in the TRX Wallet
      ///
      /// Key: welldone.viewmodel.sharing.text3
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      var welldoneViewmodelSharingText3: RswiftResources.StringResource { .init(key: "welldone.viewmodel.sharing.text3", tableName: "Localizable", source: source, developmentValue: "I securely store Ethereum and ERC20 tokens in the TRX Wallet", comment: nil) }

      /// en translation: I secure my Ethereum and ERC20 tokens in the TRX Wallet.
      ///
      /// Key: welldone.viewmodel.sharing.text4
      ///
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      var welldoneViewmodelSharingText4: RswiftResources.StringResource { .init(key: "welldone.viewmodel.sharing.text4", tableName: "Localizable", source: source, developmentValue: "I secure my Ethereum and ERC20 tokens in the TRX Wallet.", comment: nil) }
    }

    /// This `_R.string.tron` struct is generated, and contains static references to 116 localization keys.
    struct tron {
      let source: RswiftResources.StringResource.Source

      /// en translation: Cancel
      ///
      /// Key: Alert.UnFreeze.cancel
      ///
      /// Locales: en, zh-Hans
      var alertUnFreezeCancel: RswiftResources.StringResource { .init(key: "Alert.UnFreeze.cancel", tableName: "Tron", source: source, developmentValue: "Cancel", comment: nil) }

      /// en translation: Unfreeze
      ///
      /// Key: Alert.UnFreeze.sure
      ///
      /// Locales: en, zh-Hans
      var alertUnFreezeSure: RswiftResources.StringResource { .init(key: "Alert.UnFreeze.sure", tableName: "Tron", source: source, developmentValue: "Unfreeze", comment: nil) }

      /// en translation: Are you sure you want to unfreeze TRX？
      ///
      /// Key: Alert.UnFreeze.title
      ///
      /// Locales: en, zh-Hans
      var alertUnFreezeTitle: RswiftResources.StringResource { .init(key: "Alert.UnFreeze.title", tableName: "Tron", source: source, developmentValue: "Are you sure you want to unfreeze TRX？", comment: nil) }

      /// en translation: Backup
      ///
      /// Key: Backup.backup.button.title
      ///
      /// Locales: en, zh-Hans
      var backupBackupButtonTitle: RswiftResources.StringResource { .init(key: "Backup.backup.button.title", tableName: "Tron", source: source, developmentValue: "Backup", comment: nil) }

      /// en translation: Only if you can control your assets and prevent them from losing because of application deletion, you need to backup keystore.
      ///
      /// Key: Backup.tip1.label.title
      ///
      /// Locales: en, zh-Hans
      var backupTip1LabelTitle: RswiftResources.StringResource { .init(key: "Backup.tip1.label.title", tableName: "Tron", source: source, developmentValue: "Only if you can control your assets and prevent them from losing because of application deletion, you need to backup keystore.", comment: nil) }

      /// en translation: Only if you can control your assets and prevent them from losing because of application deletion, you need to backup keystore.
      ///
      /// Key: Backup.tip2.label.title
      ///
      /// Locales: en, zh-Hans
      var backupTip2LabelTitle: RswiftResources.StringResource { .init(key: "Backup.tip2.label.title", tableName: "Tron", source: source, developmentValue: "Only if you can control your assets and prevent them from losing because of application deletion, you need to backup keystore.", comment: nil) }

      /// en translation: Backups
      ///
      /// Key: Backup.tipTitle.label.title
      ///
      /// Locales: en, zh-Hans
      var backupTipTitleLabelTitle: RswiftResources.StringResource { .init(key: "Backup.tipTitle.label.title", tableName: "Tron", source: source, developmentValue: "Backups", comment: nil) }

      /// en translation: TRX Amount
      ///
      /// Key: Balance.FreezePopView.amount.label.title
      ///
      /// Locales: en, zh-Hans
      var balanceFreezePopViewAmountLabelTitle: RswiftResources.StringResource { .init(key: "Balance.FreezePopView.amount.label.title", tableName: "Tron", source: source, developmentValue: "TRX Amount", comment: nil) }

      /// en translation: I coinfirm to freeze TRX for at least of 3 days
      ///
      /// Key: Balance.FreezePopView.confirmtip.label.title
      ///
      /// Locales: en, zh-Hans
      var balanceFreezePopViewConfirmtipLabelTitle: RswiftResources.StringResource { .init(key: "Balance.FreezePopView.confirmtip.label.title", tableName: "Tron", source: source, developmentValue: "I coinfirm to freeze TRX for at least of 3 days", comment: nil) }

      /// en translation: Freeze Balance
      ///
      /// Key: Balance.FreezePopView.freeze.button.title
      ///
      /// Locales: en, zh-Hans
      var balanceFreezePopViewFreezeButtonTitle: RswiftResources.StringResource { .init(key: "Balance.FreezePopView.freeze.button.title", tableName: "Tron", source: source, developmentValue: "Freeze Balance", comment: nil) }

      /// en translation: Freeze Balance
      ///
      /// Key: Balance.FreezePopView.title
      ///
      /// Locales: en, zh-Hans
      var balanceFreezePopViewTitle: RswiftResources.StringResource { .init(key: "Balance.FreezePopView.title", tableName: "Tron", source: source, developmentValue: "Freeze Balance", comment: nil) }

      /// en translation: My Public TRX Wallet Address
      ///
      /// Key: Balance.Receive.addressTip
      ///
      /// Locales: en, zh-Hans
      var balanceReceiveAddressTip: RswiftResources.StringResource { .init(key: "Balance.Receive.addressTip", tableName: "Tron", source: source, developmentValue: "My Public TRX Wallet Address", comment: nil) }

      /// en translation: Copy
      ///
      /// Key: Balance.Receive.buttonCopy
      ///
      /// Locales: en, zh-Hans
      var balanceReceiveButtonCopy: RswiftResources.StringResource { .init(key: "Balance.Receive.buttonCopy", tableName: "Tron", source: source, developmentValue: "Copy", comment: nil) }

      /// en translation: Confirm
      ///
      /// Key: Balance.Send.Confirm.button.confirm
      ///
      /// Locales: en, zh-Hans
      var balanceSendConfirmButtonConfirm: RswiftResources.StringResource { .init(key: "Balance.Send.Confirm.button.confirm", tableName: "Tron", source: source, developmentValue: "Confirm", comment: nil) }

      /// en translation: Sender
      ///
      /// Key: Balance.Send.Confirm.sender
      ///
      /// Locales: en, zh-Hans
      var balanceSendConfirmSender: RswiftResources.StringResource { .init(key: "Balance.Send.Confirm.sender", tableName: "Tron", source: source, developmentValue: "Sender", comment: nil) }

      /// en translation: To
      ///
      /// Key: Balance.Send.Confirm.to
      ///
      /// Locales: en, zh-Hans
      var balanceSendConfirmTo: RswiftResources.StringResource { .init(key: "Balance.Send.Confirm.to", tableName: "Tron", source: source, developmentValue: "To", comment: nil) }

      /// en translation: Total
      ///
      /// Key: Balance.Send.Confirm.total
      ///
      /// Locales: en, zh-Hans
      var balanceSendConfirmTotal: RswiftResources.StringResource { .init(key: "Balance.Send.Confirm.total", tableName: "Tron", source: source, developmentValue: "Total", comment: nil) }

      /// en translation: Receiving Address
      ///
      /// Key: Balance.Send.address.label.title
      ///
      /// Locales: en, zh-Hans
      var balanceSendAddressLabelTitle: RswiftResources.StringResource { .init(key: "Balance.Send.address.label.title", tableName: "Tron", source: source, developmentValue: "Receiving Address", comment: nil) }

      /// en translation: Next
      ///
      /// Key: Balance.Send.next.button.title
      ///
      /// Locales: en, zh-Hans
      var balanceSendNextButtonTitle: RswiftResources.StringResource { .init(key: "Balance.Send.next.button.title", tableName: "Tron", source: source, developmentValue: "Next", comment: nil) }

      /// en translation: The number of
      ///
      /// Key: Balance.Send.number.label.title
      ///
      /// Locales: en, zh-Hans
      var balanceSendNumberLabelTitle: RswiftResources.StringResource { .init(key: "Balance.Send.number.label.title", tableName: "Tron", source: source, developmentValue: "The number of", comment: nil) }

      /// en translation: Paste
      ///
      /// Key: Balance.Send.paste.button.title
      ///
      /// Locales: en, zh-Hans
      var balanceSendPasteButtonTitle: RswiftResources.StringResource { .init(key: "Balance.Send.paste.button.title", tableName: "Tron", source: source, developmentValue: "Paste", comment: nil) }

      /// en translation: BandWidth
      ///
      /// Key: Balance.bandwidth.label.title
      ///
      /// Locales: en, zh-Hans
      var balanceBandwidthLabelTitle: RswiftResources.StringResource { .init(key: "Balance.bandwidth.label.title", tableName: "Tron", source: source, developmentValue: "BandWidth", comment: nil) }

      /// en translation: Receive
      ///
      /// Key: Balance.button.receive
      ///
      /// Locales: en, zh-Hans
      var balanceButtonReceive: RswiftResources.StringResource { .init(key: "Balance.button.receive", tableName: "Tron", source: source, developmentValue: "Receive", comment: nil) }

      /// en translation: Send
      ///
      /// Key: Balance.button.send
      ///
      /// Locales: en, zh-Hans
      var balanceButtonSend: RswiftResources.StringResource { .init(key: "Balance.button.send", tableName: "Tron", source: source, developmentValue: "Send", comment: nil) }

      /// en translation: Unfreeze
      ///
      /// Key: Balance.freeze.label.title
      ///
      /// Locales: en, zh-Hans
      var balanceFreezeLabelTitle: RswiftResources.StringResource { .init(key: "Balance.freeze.label.title", tableName: "Tron", source: source, developmentValue: "Unfreeze", comment: nil) }

      /// en translation: Balance
      ///
      /// Key: Balance.nav.title
      ///
      /// Locales: en, zh-Hans
      var balanceNavTitle: RswiftResources.StringResource { .init(key: "Balance.nav.title", tableName: "Tron", source: source, developmentValue: "Balance", comment: nil) }

      /// en translation: Freeze
      ///
      /// Key: Balance.power.label.title
      ///
      /// Locales: en, zh-Hans
      var balancePowerLabelTitle: RswiftResources.StringResource { .init(key: "Balance.power.label.title", tableName: "Tron", source: source, developmentValue: "Freeze", comment: nil) }

      /// en translation: Cold Wallet Help
      ///
      /// Key: ColdWallet.Set.coldwallet
      ///
      /// Locales: en, zh-Hans
      var coldWalletSetColdwallet: RswiftResources.StringResource { .init(key: "ColdWallet.Set.coldwallet", tableName: "Tron", source: source, developmentValue: "Cold Wallet Help", comment: nil) }

      /// en translation: Cold Wallet(click show detail)
      ///
      /// Key: ColdWallet.cold.title
      ///
      /// Locales: en, zh-Hans
      var coldWalletColdTitle: RswiftResources.StringResource { .init(key: "ColdWallet.cold.title", tableName: "Tron", source: source, developmentValue: "Cold Wallet(click show detail)", comment: nil) }

      /// en translation: Unavailable in this wallet mode
      ///
      /// Key: ColdWallet.fobid.hud
      ///
      /// Locales: en, zh-Hans
      var coldWalletFobidHud: RswiftResources.StringResource { .init(key: "ColdWallet.fobid.hud", tableName: "Tron", source: source, developmentValue: "Unavailable in this wallet mode", comment: nil) }

      /// en translation: Sign Transaction
      ///
      /// Key: ColdWallet.sign.title
      ///
      /// Locales: en, zh-Hans
      var coldWalletSignTitle: RswiftResources.StringResource { .init(key: "ColdWallet.sign.title", tableName: "Tron", source: source, developmentValue: "Sign Transaction", comment: nil) }

      /// en translation: Watch Wallet(click show detail)
      ///
      /// Key: ColdWallet.watch.title
      ///
      /// Locales: en, zh-Hans
      var coldWalletWatchTitle: RswiftResources.StringResource { .init(key: "ColdWallet.watch.title", tableName: "Tron", source: source, developmentValue: "Watch Wallet(click show detail)", comment: nil) }

      /// en translation: Account address
      ///
      /// Key: Create.address.label.title
      ///
      /// Locales: en, zh-Hans
      var createAddressLabelTitle: RswiftResources.StringResource { .init(key: "Create.address.label.title", tableName: "Tron", source: source, developmentValue: "Account address", comment: nil) }

      /// en translation: Make sure copy your wallet address and paste it safely. Or you can write it down on the paper and keep it well
      ///
      /// Key: Create.address.tip.label.title
      ///
      /// Locales: en, zh-Hans
      var createAddressTipLabelTitle: RswiftResources.StringResource { .init(key: "Create.address.tip.label.title", tableName: "Tron", source: source, developmentValue: "Make sure copy your wallet address and paste it safely. Or you can write it down on the paper and keep it well", comment: nil) }

      /// en translation: I understand that if I forget/lose my password I will never be able to access my assets.
      ///
      /// Key: Create.checkbox.tip1.label.title
      ///
      /// Locales: en, zh-Hans
      var createCheckboxTip1LabelTitle: RswiftResources.StringResource { .init(key: "Create.checkbox.tip1.label.title", tableName: "Tron", source: source, developmentValue: "I understand that if I forget/lose my password I will never be able to access my assets.", comment: nil) }

      /// en translation: I understand that if I forget/lose my password no one will be able to help me recover it.
      ///
      /// Key: Create.checkbox.tip2.label.title
      ///
      /// Locales: en, zh-Hans
      var createCheckboxTip2LabelTitle: RswiftResources.StringResource { .init(key: "Create.checkbox.tip2.label.title", tableName: "Tron", source: source, developmentValue: "I understand that if I forget/lose my password no one will be able to help me recover it.", comment: nil) }

      /// en translation: I've written my password on paper.
      ///
      /// Key: Create.checkbox.tip3.label.title
      ///
      /// Locales: en, zh-Hans
      var createCheckboxTip3LabelTitle: RswiftResources.StringResource { .init(key: "Create.checkbox.tip3.label.title", tableName: "Tron", source: source, developmentValue: "I've written my password on paper.", comment: nil) }

      /// en translation: Copy
      ///
      /// Key: Create.copy.button.title
      ///
      /// Locales: en, zh-Hans
      var createCopyButtonTitle: RswiftResources.StringResource { .init(key: "Create.copy.button.title", tableName: "Tron", source: source, developmentValue: "Copy", comment: nil) }

      /// en translation: Create Wallet
      ///
      /// Key: Create.create.button.title
      ///
      /// Locales: en, zh-Hans
      var createCreateButtonTitle: RswiftResources.StringResource { .init(key: "Create.create.button.title", tableName: "Tron", source: source, developmentValue: "Create Wallet", comment: nil) }

      /// en translation: Private Key
      ///
      /// Key: Create.password.label.title
      ///
      /// Locales: en, zh-Hans
      var createPasswordLabelTitle: RswiftResources.StringResource { .init(key: "Create.password.label.title", tableName: "Tron", source: source, developmentValue: "Private Key", comment: nil) }

      /// en translation: Paste
      ///
      /// Key: Create.paste.button.title
      ///
      /// Locales: en, zh-Hans
      var createPasteButtonTitle: RswiftResources.StringResource { .init(key: "Create.paste.button.title", tableName: "Tron", source: source, developmentValue: "Paste", comment: nil) }

      /// en translation: Repeat Private Key
      ///
      /// Key: Create.repassword.label.title
      ///
      /// Locales: en, zh-Hans
      var createRepasswordLabelTitle: RswiftResources.StringResource { .init(key: "Create.repassword.label.title", tableName: "Tron", source: source, developmentValue: "Repeat Private Key", comment: nil) }

      /// en translation: Bindwidth not enough
      ///
      /// Key: Error.Bandwidth
      ///
      /// Locales: en, zh-Hans
      var errorBandwidth: RswiftResources.StringResource { .init(key: "Error.Bandwidth", tableName: "Tron", source: source, developmentValue: "Bindwidth not enough", comment: nil) }

      /// en translation: Contract export error
      ///
      /// Key: Error.ContractExe
      ///
      /// Locales: en, zh-Hans
      var errorContractExe: RswiftResources.StringResource { .init(key: "Error.ContractExe", tableName: "Tron", source: source, developmentValue: "Contract export error", comment: nil) }

      /// en translation: Contract validation error
      ///
      /// Key: Error.ContractValidate
      ///
      /// Locales: en, zh-Hans
      var errorContractValidate: RswiftResources.StringResource { .init(key: "Error.ContractValidate", tableName: "Tron", source: source, developmentValue: "Contract validation error", comment: nil) }

      /// en translation: Repeated transactions
      ///
      /// Key: Error.DupTransaction
      ///
      /// Locales: en, zh-Hans
      var errorDupTransaction: RswiftResources.StringResource { .init(key: "Error.DupTransaction", tableName: "Tron", source: source, developmentValue: "Repeated transactions", comment: nil) }

      /// en translation: Other errors
      ///
      /// Key: Error.Other
      ///
      /// Locales: en, zh-Hans
      var errorOther: RswiftResources.StringResource { .init(key: "Error.Other", tableName: "Tron", source: source, developmentValue: "Other errors", comment: nil) }

      /// en translation: The server is busy
      ///
      /// Key: Error.ServerBusy
      ///
      /// Locales: en, zh-Hans
      var errorServerBusy: RswiftResources.StringResource { .init(key: "Error.ServerBusy", tableName: "Tron", source: source, developmentValue: "The server is busy", comment: nil) }

      /// en translation: Transaction error
      ///
      /// Key: Error.Tapos
      ///
      /// Locales: en, zh-Hans
      var errorTapos: RswiftResources.StringResource { .init(key: "Error.Tapos", tableName: "Tron", source: source, developmentValue: "Transaction error", comment: nil) }

      /// en translation: The transaction amount is too large
      ///
      /// Key: Error.TooBigTransaction
      ///
      /// Locales: en, zh-Hans
      var errorTooBigTransaction: RswiftResources.StringResource { .init(key: "Error.TooBigTransaction", tableName: "Tron", source: source, developmentValue: "The transaction amount is too large", comment: nil) }

      /// en translation: Transaction expires
      ///
      /// Key: Error.TransactionExpiration
      ///
      /// Locales: en, zh-Hans
      var errorTransactionExpiration: RswiftResources.StringResource { .init(key: "Error.TransactionExpiration", tableName: "Tron", source: source, developmentValue: "Transaction expires", comment: nil) }

      /// en translation: Unable to unfreeze TRX. This could be caused because the minimal freeze period hasn't been reached yet.
      ///
      /// Key: Error.UnFreeze.message
      ///
      /// Locales: en, zh-Hans
      var errorUnFreezeMessage: RswiftResources.StringResource { .init(key: "Error.UnFreeze.message", tableName: "Tron", source: source, developmentValue: "Unable to unfreeze TRX. This could be caused because the minimal freeze period hasn't been reached yet.", comment: nil) }

      /// en translation: OK
      ///
      /// Key: Error.UnFreeze.ok
      ///
      /// Locales: en, zh-Hans
      var errorUnFreezeOk: RswiftResources.StringResource { .init(key: "Error.UnFreeze.ok", tableName: "Tron", source: source, developmentValue: "OK", comment: nil) }

      /// en translation: Unable to unfreeze
      ///
      /// Key: Error.UnFreeze.title
      ///
      /// Locales: en, zh-Hans
      var errorUnFreezeTitle: RswiftResources.StringResource { .init(key: "Error.UnFreeze.title", tableName: "Tron", source: source, developmentValue: "Unable to unfreeze", comment: nil) }

      /// en translation: Signature Error
      ///
      /// Key: Error.sig
      ///
      /// Locales: en, zh-Hans
      var errorSig: RswiftResources.StringResource { .init(key: "Error.sig", tableName: "Tron", source: source, developmentValue: "Signature Error", comment: nil) }

      /// en translation: Copy Success
      ///
      /// Key: HUD.copysuccess
      ///
      /// Locales: en, zh-Hans
      var hudCopysuccess: RswiftResources.StringResource { .init(key: "HUD.copysuccess", tableName: "Tron", source: source, developmentValue: "Copy Success", comment: nil) }

      /// en translation: Failed
      ///
      /// Key: HUD.failed
      ///
      /// Locales: en, zh-Hans
      var hudFailed: RswiftResources.StringResource { .init(key: "HUD.failed", tableName: "Tron", source: source, developmentValue: "Failed", comment: nil) }

      /// en translation: Success
      ///
      /// Key: HUD.success
      ///
      /// Locales: en, zh-Hans
      var hudSuccess: RswiftResources.StringResource { .init(key: "HUD.success", tableName: "Tron", source: source, developmentValue: "Success", comment: nil) }

      /// en translation: I confirm that creating the total supply of the token costs one time total fee of 1024 TRX
      ///
      /// Key: IssueToken.confirmtip.checkbox.title
      ///
      /// Locales: en, zh-Hans
      var issueTokenConfirmtipCheckboxTitle: RswiftResources.StringResource { .init(key: "IssueToken.confirmtip.checkbox.title", tableName: "Tron", source: source, developmentValue: "I confirm that creating the total supply of the token costs one time total fee of 1024 TRX", comment: nil) }

      /// en translation: Description
      ///
      /// Key: IssueToken.description.label.title
      ///
      /// Locales: en, zh-Hans
      var issueTokenDescriptionLabelTitle: RswiftResources.StringResource { .init(key: "IssueToken.description.label.title", tableName: "Tron", source: source, developmentValue: "Description", comment: nil) }

      /// en translation: Details
      ///
      /// Key: IssueToken.details.label.title
      ///
      /// Locales: en, zh-Hans
      var issueTokenDetailsLabelTitle: RswiftResources.StringResource { .init(key: "IssueToken.details.label.title", tableName: "Tron", source: source, developmentValue: "Details", comment: nil) }

      /// en translation: End time
      ///
      /// Key: IssueToken.endtime.label.title
      ///
      /// Locales: en, zh-Hans
      var issueTokenEndtimeLabelTitle: RswiftResources.StringResource { .init(key: "IssueToken.endtime.label.title", tableName: "Tron", source: source, developmentValue: "End time", comment: nil) }

      /// en translation: Frozen amount
      ///
      /// Key: IssueToken.frozenamount.label.title
      ///
      /// Locales: en, zh-Hans
      var issueTokenFrozenamountLabelTitle: RswiftResources.StringResource { .init(key: "IssueToken.frozenamount.label.title", tableName: "Tron", source: source, developmentValue: "Frozen amount", comment: nil) }

      /// en translation: Frozen days
      ///
      /// Key: IssueToken.frozendays.label.title
      ///
      /// Locales: en, zh-Hans
      var issueTokenFrozendaysLabelTitle: RswiftResources.StringResource { .init(key: "IssueToken.frozendays.label.title", tableName: "Tron", source: source, developmentValue: "Frozen days", comment: nil) }

      /// en translation: Issue a Token
      ///
      /// Key: IssueToken.issue.button.title
      ///
      /// Locales: en, zh-Hans
      var issueTokenIssueButtonTitle: RswiftResources.StringResource { .init(key: "IssueToken.issue.button.title", tableName: "Tron", source: source, developmentValue: "Issue a Token", comment: nil) }

      /// en translation: Token name
      ///
      /// Key: IssueToken.issueatoken.label.title
      ///
      /// Locales: en, zh-Hans
      var issueTokenIssueatokenLabelTitle: RswiftResources.StringResource { .init(key: "IssueToken.issueatoken.label.title", tableName: "Tron", source: source, developmentValue: "Token name", comment: nil) }

      /// en translation: Issue a Token
      ///
      /// Key: IssueToken.nav.title
      ///
      /// Locales: en, zh-Hans
      var issueTokenNavTitle: RswiftResources.StringResource { .init(key: "IssueToken.nav.title", tableName: "Tron", source: source, developmentValue: "Issue a Token", comment: nil) }

      /// en translation: Start time
      ///
      /// Key: IssueToken.starttime.label.title
      ///
      /// Locales: en, zh-Hans
      var issueTokenStarttimeLabelTitle: RswiftResources.StringResource { .init(key: "IssueToken.starttime.label.title", tableName: "Tron", source: source, developmentValue: "Start time", comment: nil) }

      /// en translation: Specify the price of a single token by defining how many tokens a participant will receive for every TRX they spend.  Participants will receive Token for every 1 TRX.
      ///
      /// Key: IssueToken.tip.label.title
      ///
      /// Locales: en, zh-Hans
      var issueTokenTipLabelTitle: RswiftResources.StringResource { .init(key: "IssueToken.tip.label.title", tableName: "Tron", source: source, developmentValue: "Specify the price of a single token by defining how many tokens a participant will receive for every TRX they spend.  Participants will receive Token for every 1 TRX.", comment: nil) }

      /// en translation: Token amount
      ///
      /// Key: IssueToken.tokenamount.label.title
      ///
      /// Locales: en, zh-Hans
      var issueTokenTokenamountLabelTitle: RswiftResources.StringResource { .init(key: "IssueToken.tokenamount.label.title", tableName: "Tron", source: source, developmentValue: "Token amount", comment: nil) }

      /// en translation: Total supply
      ///
      /// Key: IssueToken.totalsupply.label.title
      ///
      /// Locales: en, zh-Hans
      var issueTokenTotalsupplyLabelTitle: RswiftResources.StringResource { .init(key: "IssueToken.totalsupply.label.title", tableName: "Tron", source: source, developmentValue: "Total supply", comment: nil) }

      /// en translation: TRX amount
      ///
      /// Key: IssueToken.trxamount.label.title
      ///
      /// Locales: en, zh-Hans
      var issueTokenTrxamountLabelTitle: RswiftResources.StringResource { .init(key: "IssueToken.trxamount.label.title", tableName: "Tron", source: source, developmentValue: "TRX amount", comment: nil) }

      /// en translation: URL
      ///
      /// Key: IssueToken.url.label.title
      ///
      /// Locales: en, zh-Hans
      var issueTokenUrlLabelTitle: RswiftResources.StringResource { .init(key: "IssueToken.url.label.title", tableName: "Tron", source: source, developmentValue: "URL", comment: nil) }

      /// en translation: Create Wallet
      ///
      /// Key: Login.create.button.title
      ///
      /// Locales: en, zh-Hans
      var loginCreateButtonTitle: RswiftResources.StringResource { .init(key: "Login.create.button.title", tableName: "Tron", source: source, developmentValue: "Create Wallet", comment: nil) }

      /// en translation: Import Wallet
      ///
      /// Key: Login.import.button.title
      ///
      /// Locales: en, zh-Hans
      var loginImportButtonTitle: RswiftResources.StringResource { .init(key: "Login.import.button.title", tableName: "Tron", source: source, developmentValue: "Import Wallet", comment: nil) }

      /// en translation: Cancel
      ///
      /// Key: Nav.Button.cancel
      ///
      /// Locales: en, zh-Hans
      var navButtonCancel: RswiftResources.StringResource { .init(key: "Nav.Button.cancel", tableName: "Tron", source: source, developmentValue: "Cancel", comment: nil) }

      /// en translation: Complete
      ///
      /// Key: Nav.Button.complete
      ///
      /// Locales: en, zh-Hans
      var navButtonComplete: RswiftResources.StringResource { .init(key: "Nav.Button.complete", tableName: "Tron", source: source, developmentValue: "Complete", comment: nil) }

      /// en translation: Network Connected,Become Hot Wallet
      ///
      /// Key: Network.available.hud
      ///
      /// Locales: en, zh-Hans
      var networkAvailableHud: RswiftResources.StringResource { .init(key: "Network.available.hud", tableName: "Tron", source: source, developmentValue: "Network Connected,Become Hot Wallet", comment: nil) }

      /// en translation: Network Disconnected,Become Cold Wallet
      ///
      /// Key: Network.unavailable.hud
      ///
      /// Locales: en, zh-Hans
      var networkUnavailableHud: RswiftResources.StringResource { .init(key: "Network.unavailable.hud", tableName: "Tron", source: source, developmentValue: "Network Disconnected,Become Cold Wallet", comment: nil) }

      /// en translation: How to use cold wallet
      ///
      /// Key: Setting.coldwallet.title
      ///
      /// Locales: en, zh-Hans
      var settingColdwalletTitle: RswiftResources.StringResource { .init(key: "Setting.coldwallet.title", tableName: "Tron", source: source, developmentValue: "How to use cold wallet", comment: nil) }

      /// en translation: Settings
      ///
      /// Key: Setting.nav.title
      ///
      /// Locales: en, zh-Hans
      var settingNavTitle: RswiftResources.StringResource { .init(key: "Setting.nav.title", tableName: "Tron", source: source, developmentValue: "Settings", comment: nil) }

      /// en translation: password/touch ID
      ///
      /// Key: Setting.password/touchID.title
      ///
      /// Locales: en, zh-Hans
      var settingPasswordTouchIDTitle: RswiftResources.StringResource { .init(key: "Setting.password/touchID.title", tableName: "Tron", source: source, developmentValue: "password/touch ID", comment: nil) }

      /// en translation: Security
      ///
      /// Key: Setting.secion.password.title
      ///
      /// Locales: en, zh-Hans
      var settingSecionPasswordTitle: RswiftResources.StringResource { .init(key: "Setting.secion.password.title", tableName: "Tron", source: source, developmentValue: "Security", comment: nil) }

      /// en translation: Support us
      ///
      /// Key: Setting.secion.share.title
      ///
      /// Locales: en, zh-Hans
      var settingSecionShareTitle: RswiftResources.StringResource { .init(key: "Setting.secion.share.title", tableName: "Tron", source: source, developmentValue: "Support us", comment: nil) }

      /// en translation: Share
      ///
      /// Key: Setting.share.title
      ///
      /// Locales: en, zh-Hans
      var settingShareTitle: RswiftResources.StringResource { .init(key: "Setting.share.title", tableName: "Tron", source: source, developmentValue: "Share", comment: nil) }

      /// en translation: Version
      ///
      /// Key: Setting.version.title
      ///
      /// Locales: en, zh-Hans
      var settingVersionTitle: RswiftResources.StringResource { .init(key: "Setting.version.title", tableName: "Tron", source: source, developmentValue: "Version", comment: nil) }

      /// en translation: Wallets
      ///
      /// Key: Setting.wallets.title
      ///
      /// Locales: en, zh-Hans
      var settingWalletsTitle: RswiftResources.StringResource { .init(key: "Setting.wallets.title", tableName: "Tron", source: source, developmentValue: "Wallets", comment: nil) }

      /// en translation: Account
      ///
      /// Key: Token.PopView.account.label.title
      ///
      /// Locales: en, zh-Hans
      var tokenPopViewAccountLabelTitle: RswiftResources.StringResource { .init(key: "Token.PopView.account.label.title", tableName: "Tron", source: source, developmentValue: "Account", comment: nil) }

      /// en translation: Amount
      ///
      /// Key: Token.PopView.amount.label.title
      ///
      /// Locales: en, zh-Hans
      var tokenPopViewAmountLabelTitle: RswiftResources.StringResource { .init(key: "Token.PopView.amount.label.title", tableName: "Tron", source: source, developmentValue: "Amount", comment: nil) }

      /// en translation: Enter the number of
      ///
      /// Key: Token.PopView.input.title
      ///
      /// Locales: en, zh-Hans
      var tokenPopViewInputTitle: RswiftResources.StringResource { .init(key: "Token.PopView.input.title", tableName: "Tron", source: source, developmentValue: "Enter the number of", comment: nil) }

      /// en translation: Submit
      ///
      /// Key: Token.PopView.submit.button.title
      ///
      /// Locales: en, zh-Hans
      var tokenPopViewSubmitButtonTitle: RswiftResources.StringResource { .init(key: "Token.PopView.submit.button.title", tableName: "Tron", source: source, developmentValue: "Submit", comment: nil) }

      /// en translation: Finished
      ///
      /// Key: Token.finished.button.title
      ///
      /// Locales: en, zh-Hans
      var tokenFinishedButtonTitle: RswiftResources.StringResource { .init(key: "Token.finished.button.title", tableName: "Tron", source: source, developmentValue: "Finished", comment: nil) }

      /// en translation: Issuer
      ///
      /// Key: Token.issuer.label.title
      ///
      /// Locales: en, zh-Hans
      var tokenIssuerLabelTitle: RswiftResources.StringResource { .init(key: "Token.issuer.label.title", tableName: "Tron", source: source, developmentValue: "Issuer", comment: nil) }

      /// en translation: Token name
      ///
      /// Key: Token.name.label.title
      ///
      /// Locales: en, zh-Hans
      var tokenNameLabelTitle: RswiftResources.StringResource { .init(key: "Token.name.label.title", tableName: "Tron", source: source, developmentValue: "Token name", comment: nil) }

      /// en translation: Token
      ///
      /// Key: Token.nav.title
      ///
      /// Locales: en, zh-Hans
      var tokenNavTitle: RswiftResources.StringResource { .init(key: "Token.nav.title", tableName: "Tron", source: source, developmentValue: "Token", comment: nil) }

      /// en translation: Not start
      ///
      /// Key: Token.notstart.button.title
      ///
      /// Locales: en, zh-Hans
      var tokenNotstartButtonTitle: RswiftResources.StringResource { .init(key: "Token.notstart.button.title", tableName: "Tron", source: source, developmentValue: "Not start", comment: nil) }

      /// en translation: Participate
      ///
      /// Key: Token.participate.button.title
      ///
      /// Locales: en, zh-Hans
      var tokenParticipateButtonTitle: RswiftResources.StringResource { .init(key: "Token.participate.button.title", tableName: "Tron", source: source, developmentValue: "Participate", comment: nil) }

      /// en translation: Total supply
      ///
      /// Key: Token.totalsupply.label.title
      ///
      /// Locales: en, zh-Hans
      var tokenTotalsupplyLabelTitle: RswiftResources.StringResource { .init(key: "Token.totalsupply.label.title", tableName: "Tron", source: source, developmentValue: "Total supply", comment: nil) }

      /// en translation: No Transactions
      ///
      /// Key: Transaction.empty.tip
      ///
      /// Locales: en, zh-Hans
      var transactionEmptyTip: RswiftResources.StringResource { .init(key: "Transaction.empty.tip", tableName: "Tron", source: source, developmentValue: "No Transactions", comment: nil) }

      /// en translation: From
      ///
      /// Key: Transaction.from.label.title
      ///
      /// Locales: en, zh-Hans
      var transactionFromLabelTitle: RswiftResources.StringResource { .init(key: "Transaction.from.label.title", tableName: "Tron", source: source, developmentValue: "From", comment: nil) }

      /// en translation: Transactions
      ///
      /// Key: Transaction.nav.title
      ///
      /// Locales: en, zh-Hans
      var transactionNavTitle: RswiftResources.StringResource { .init(key: "Transaction.nav.title", tableName: "Tron", source: source, developmentValue: "Transactions", comment: nil) }

      /// en translation: To
      ///
      /// Key: Transaction.to.label.title
      ///
      /// Locales: en, zh-Hans
      var transactionToLabelTitle: RswiftResources.StringResource { .init(key: "Transaction.to.label.title", tableName: "Tron", source: source, developmentValue: "To", comment: nil) }

      /// en translation: Account
      ///
      /// Key: Vote.PopView.account.label.title
      ///
      /// Locales: en, zh-Hans
      var votePopViewAccountLabelTitle: RswiftResources.StringResource { .init(key: "Vote.PopView.account.label.title", tableName: "Tron", source: source, developmentValue: "Account", comment: nil) }

      /// en translation: Confirm
      ///
      /// Key: Vote.PopView.comfirm.button.title
      ///
      /// Locales: en, zh-Hans
      var votePopViewComfirmButtonTitle: RswiftResources.StringResource { .init(key: "Vote.PopView.comfirm.button.title", tableName: "Tron", source: source, developmentValue: "Confirm", comment: nil) }

      /// en translation: Enter a number
      ///
      /// Key: Vote.PopView.input.title
      ///
      /// Locales: en, zh-Hans
      var votePopViewInputTitle: RswiftResources.StringResource { .init(key: "Vote.PopView.input.title", tableName: "Tron", source: source, developmentValue: "Enter a number", comment: nil) }

      /// en translation: Address 
      ///
      /// Key: Vote.address.label.title
      ///
      /// Locales: en, zh-Hans
      var voteAddressLabelTitle: RswiftResources.StringResource { .init(key: "Vote.address.label.title", tableName: "Tron", source: source, developmentValue: "Address ", comment: nil) }

      /// en translation: Vote
      ///
      /// Key: Vote.button.title
      ///
      /// Locales: en, zh-Hans
      var voteButtonTitle: RswiftResources.StringResource { .init(key: "Vote.button.title", tableName: "Tron", source: source, developmentValue: "Vote", comment: nil) }

      /// en translation: Vote
      ///
      /// Key: Vote.nav.title
      ///
      /// Locales: en, zh-Hans
      var voteNavTitle: RswiftResources.StringResource { .init(key: "Vote.nav.title", tableName: "Tron", source: source, developmentValue: "Vote", comment: nil) }

      /// en translation: Vote
      ///
      /// Key: Vote.vote.label.title
      ///
      /// Locales: en, zh-Hans
      var voteVoteLabelTitle: RswiftResources.StringResource { .init(key: "Vote.vote.label.title", tableName: "Tron", source: source, developmentValue: "Vote", comment: nil) }

      /// en translation: Your Vote
      ///
      /// Key: Vote.yourvote.label.title
      ///
      /// Locales: en, zh-Hans
      var voteYourvoteLabelTitle: RswiftResources.StringResource { .init(key: "Vote.yourvote.label.title", tableName: "Tron", source: source, developmentValue: "Your Vote", comment: nil) }

      /// en translation: Copy Address
      ///
      /// Key: Wallets.address.actionsheet.title
      ///
      /// Locales: en, zh-Hans
      var walletsAddressActionsheetTitle: RswiftResources.StringResource { .init(key: "Wallets.address.actionsheet.title", tableName: "Tron", source: source, developmentValue: "Copy Address", comment: nil) }

      /// en translation: Backup
      ///
      /// Key: Wallets.backup.actionsheet.title
      ///
      /// Locales: en, zh-Hans
      var walletsBackupActionsheetTitle: RswiftResources.StringResource { .init(key: "Wallets.backup.actionsheet.title", tableName: "Tron", source: source, developmentValue: "Backup", comment: nil) }

      /// en translation: Delete
      ///
      /// Key: Wallets.delete.button.title
      ///
      /// Locales: en, zh-Hans
      var walletsDeleteButtonTitle: RswiftResources.StringResource { .init(key: "Wallets.delete.button.title", tableName: "Tron", source: source, developmentValue: "Delete", comment: nil) }

      /// en translation: Export
      ///
      /// Key: Wallets.export.button.title
      ///
      /// Locales: en, zh-Hans
      var walletsExportButtonTitle: RswiftResources.StringResource { .init(key: "Wallets.export.button.title", tableName: "Tron", source: source, developmentValue: "Export", comment: nil) }

      /// en translation: Wallets
      ///
      /// Key: Wallets.nav.title
      ///
      /// Locales: en, zh-Hans
      var walletsNavTitle: RswiftResources.StringResource { .init(key: "Wallets.nav.title", tableName: "Tron", source: source, developmentValue: "Wallets", comment: nil) }

      /// en translation: Export Private Key
      ///
      /// Key: Wallets.privatekey.actionsheet.title
      ///
      /// Locales: en, zh-Hans
      var walletsPrivatekeyActionsheetTitle: RswiftResources.StringResource { .init(key: "Wallets.privatekey.actionsheet.title", tableName: "Tron", source: source, developmentValue: "Export Private Key", comment: nil) }
    }
  }

  /// This `_R.image` struct is generated, and contains static references to 91 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `alert_cancle`.
    var alert_cancle: RswiftResources.ImageResource { .init(name: "alert_cancle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `alert_sure`.
    var alert_sure: RswiftResources.ImageResource { .init(name: "alert_sure", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `back_up`.
    var back_up: RswiftResources.ImageResource { .init(name: "back_up", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `backup_warning`.
    var backup_warning: RswiftResources.ImageResource { .init(name: "backup_warning", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `balance_bg`.
    var balance_bg: RswiftResources.ImageResource { .init(name: "balance_bg", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `balance_code`.
    var balance_code: RswiftResources.ImageResource { .init(name: "balance_code", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `browser-bookmark`.
    var browserBookmark: RswiftResources.ImageResource { .init(name: "browser-bookmark", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `browser-history`.
    var browserHistory: RswiftResources.ImageResource { .init(name: "browser-history", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `browser-home`.
    var browserHome: RswiftResources.ImageResource { .init(name: "browser-home", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `browser_scan`.
    var browser_scan: RswiftResources.ImageResource { .init(name: "browser_scan", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `cell_arrow`.
    var cell_arrow: RswiftResources.ImageResource { .init(name: "cell_arrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `common_add`.
    var common_add: RswiftResources.ImageResource { .init(name: "common_add", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `common_close`.
    var common_close: RswiftResources.ImageResource { .init(name: "common_close", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `create_wallet`.
    var create_wallet: RswiftResources.ImageResource { .init(name: "create_wallet", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `create_wallet_import`.
    var create_wallet_import: RswiftResources.ImageResource { .init(name: "create_wallet_import", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `cube`.
    var cube: RswiftResources.ImageResource { .init(name: "cube", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dapps_icon`.
    var dapps_icon: RswiftResources.ImageResource { .init(name: "dapps_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `deposit`.
    var deposit: RswiftResources.ImageResource { .init(name: "deposit", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `error`.
    var error: RswiftResources.ImageResource { .init(name: "error", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ethereum_logo_256`.
    var ethereum_logo_256: RswiftResources.ImageResource { .init(name: "ethereum_logo_256", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `exchange`.
    var exchange: RswiftResources.ImageResource { .init(name: "exchange", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `feed`.
    var feed: RswiftResources.ImageResource { .init(name: "feed", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `glasses`.
    var glasses: RswiftResources.ImageResource { .init(name: "glasses", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_arrow`.
    var ic_arrow: RswiftResources.ImageResource { .init(name: "ic_arrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_back`.
    var ic_back: RswiftResources.ImageResource { .init(name: "ic_back", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_back_white`.
    var ic_back_white: RswiftResources.ImageResource { .init(name: "ic_back_white", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_check`.
    var ic_check: RswiftResources.ImageResource { .init(name: "ic_check", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_check_circle`.
    var ic_check_circle: RswiftResources.ImageResource { .init(name: "ic_check_circle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_freeze`.
    var ic_freeze: RswiftResources.ImageResource { .init(name: "ic_freeze", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_scan`.
    var ic_scan: RswiftResources.ImageResource { .init(name: "ic_scan", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_tron_power`.
    var ic_tron_power: RswiftResources.ImageResource { .init(name: "ic_tron_power", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_watch`.
    var ic_watch: RswiftResources.ImageResource { .init(name: "ic_watch", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon_Wallets`.
    var icon_Wallets: RswiftResources.ImageResource { .init(name: "icon_Wallets", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon_acount_highlight`.
    var icon_acount_highlight: RswiftResources.ImageResource { .init(name: "icon_acount_highlight", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon_acount_nor`.
    var icon_acount_nor: RswiftResources.ImageResource { .init(name: "icon_acount_nor", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon_cold`.
    var icon_cold: RswiftResources.ImageResource { .init(name: "icon_cold", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon_set_password`.
    var icon_set_password: RswiftResources.ImageResource { .init(name: "icon_set_password", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon_set_share`.
    var icon_set_share: RswiftResources.ImageResource { .init(name: "icon_set_share", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon_setting_highlight`.
    var icon_setting_highlight: RswiftResources.ImageResource { .init(name: "icon_setting_highlight", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon_setting_nor`.
    var icon_setting_nor: RswiftResources.ImageResource { .init(name: "icon_setting_nor", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon_token_highlight`.
    var icon_token_highlight: RswiftResources.ImageResource { .init(name: "icon_token_highlight", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon_token_nor`.
    var icon_token_nor: RswiftResources.ImageResource { .init(name: "icon_token_nor", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon_transactions_highlight`.
    var icon_transactions_highlight: RswiftResources.ImageResource { .init(name: "icon_transactions_highlight", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon_transactions_nor`.
    var icon_transactions_nor: RswiftResources.ImageResource { .init(name: "icon_transactions_nor", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon_vote_highlight`.
    var icon_vote_highlight: RswiftResources.ImageResource { .init(name: "icon_vote_highlight", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon_vote_nor`.
    var icon_vote_nor: RswiftResources.ImageResource { .init(name: "icon_vote_nor", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `import_options`.
    var import_options: RswiftResources.ImageResource { .init(name: "import_options", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `launch_screen_logo`.
    var launch_screen_logo: RswiftResources.ImageResource { .init(name: "launch_screen_logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `login_logo`.
    var login_logo: RswiftResources.ImageResource { .init(name: "login_logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `mascot_happy`.
    var mascot_happy: RswiftResources.ImageResource { .init(name: "mascot_happy", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `no_transactions_mascot`.
    var no_transactions_mascot: RswiftResources.ImageResource { .init(name: "no_transactions_mascot", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `onboarding_erc20`.
    var onboarding_erc20: RswiftResources.ImageResource { .init(name: "onboarding_erc20", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `onboarding_lock`.
    var onboarding_lock: RswiftResources.ImageResource { .init(name: "onboarding_lock", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `onboarding_open_source`.
    var onboarding_open_source: RswiftResources.ImageResource { .init(name: "onboarding_open_source", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `onboarding_rocket`.
    var onboarding_rocket: RswiftResources.ImageResource { .init(name: "onboarding_rocket", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `onepassword-button`.
    var onepasswordButton: RswiftResources.ImageResource { .init(name: "onepassword-button", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `qr_code_icon`.
    var qr_code_icon: RswiftResources.ImageResource { .init(name: "qr_code_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `register_check_n`.
    var register_check_n: RswiftResources.ImageResource { .init(name: "register_check_n", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `register_check_s`.
    var register_check_s: RswiftResources.ImageResource { .init(name: "register_check_s", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings-currency`.
    var settingsCurrency: RswiftResources.ImageResource { .init(name: "settings-currency", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings-share`.
    var settingsShare: RswiftResources.ImageResource { .init(name: "settings-share", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings-wallet`.
    var settingsWallet: RswiftResources.ImageResource { .init(name: "settings-wallet", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_bug`.
    var settings_bug: RswiftResources.ImageResource { .init(name: "settings_bug", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_discord`.
    var settings_discord: RswiftResources.ImageResource { .init(name: "settings_discord", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_donate`.
    var settings_donate: RswiftResources.ImageResource { .init(name: "settings_donate", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_email`.
    var settings_email: RswiftResources.ImageResource { .init(name: "settings_email", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_export`.
    var settings_export: RswiftResources.ImageResource { .init(name: "settings_export", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_facebook`.
    var settings_facebook: RswiftResources.ImageResource { .init(name: "settings_facebook", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_faq`.
    var settings_faq: RswiftResources.ImageResource { .init(name: "settings_faq", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_icon`.
    var settings_icon: RswiftResources.ImageResource { .init(name: "settings_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_lock`.
    var settings_lock: RswiftResources.ImageResource { .init(name: "settings_lock", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_open_source`.
    var settings_open_source: RswiftResources.ImageResource { .init(name: "settings_open_source", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_preferences`.
    var settings_preferences: RswiftResources.ImageResource { .init(name: "settings_preferences", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_privacy_policy`.
    var settings_privacy_policy: RswiftResources.ImageResource { .init(name: "settings_privacy_policy", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_push_notifications`.
    var settings_push_notifications: RswiftResources.ImageResource { .init(name: "settings_push_notifications", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_rating`.
    var settings_rating: RswiftResources.ImageResource { .init(name: "settings_rating", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_road_map`.
    var settings_road_map: RswiftResources.ImageResource { .init(name: "settings_road_map", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_server`.
    var settings_server: RswiftResources.ImageResource { .init(name: "settings_server", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_telegram`.
    var settings_telegram: RswiftResources.ImageResource { .init(name: "settings_telegram", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_terms`.
    var settings_terms: RswiftResources.ImageResource { .init(name: "settings_terms", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_twitter`.
    var settings_twitter: RswiftResources.ImageResource { .init(name: "settings_twitter", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settings_wallet`.
    var settings_wallet: RswiftResources.ImageResource { .init(name: "settings_wallet", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `toolbar-back`.
    var toolbarBack: RswiftResources.ImageResource { .init(name: "toolbar-back", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `toolbar-menu`.
    var toolbarMenu: RswiftResources.ImageResource { .init(name: "toolbar-menu", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `transaction_empty`.
    var transaction_empty: RswiftResources.ImageResource { .init(name: "transaction_empty", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `transaction_error`.
    var transaction_error: RswiftResources.ImageResource { .init(name: "transaction_error", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `transaction_pending`.
    var transaction_pending: RswiftResources.ImageResource { .init(name: "transaction_pending", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `transaction_received`.
    var transaction_received: RswiftResources.ImageResource { .init(name: "transaction_received", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `transaction_sent`.
    var transaction_sent: RswiftResources.ImageResource { .init(name: "transaction_sent", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `trash`.
    var trash: RswiftResources.ImageResource { .init(name: "trash", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `welcome_logo`.
    var welcome_logo: RswiftResources.ImageResource { .init(name: "welcome_logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.file` struct is generated, and contains static references to 3 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `bignumber.min.js`.
    var bignumberMinJs: RswiftResources.FileResource { .init(name: "bignumber.min", pathExtension: "js", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `html`.
    var html: RswiftResources.FileResource { .init(name: "html", pathExtension: "", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `info.plist`.
    var infoPlist: RswiftResources.FileResource { .init(name: "info", pathExtension: "plist", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 19 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `AccountAssetTableViewCell`.
    var accountAssetTableViewCell: RswiftResources.NibReferenceReuseIdentifier<AccountAssetTableViewCell, AccountAssetTableViewCell> { .init(name: "AccountAssetTableViewCell", bundle: bundle, identifier: "AccountAssetTableViewCell") }

    /// Nib `AccountViewCell`.
    var accountViewCell: RswiftResources.NibReferenceReuseIdentifier<AccountViewCell, AccountViewCell> { .init(name: "AccountViewCell", bundle: bundle, identifier: "AccountViewCell") }

    /// Nib `AlerButtonBar`.
    var alerButtonBar: RswiftResources.NibReference<UIKit.UIView> { .init(name: "AlerButtonBar", bundle: bundle) }

    /// Nib `ColdTransactionView`.
    var coldTransactionView: RswiftResources.NibReference<ColdTransactionView> { .init(name: "ColdTransactionView", bundle: bundle) }

    /// Nib `EditTokenTableViewCell`.
    var editTokenTableViewCell: RswiftResources.NibReference<EditTokenTableViewCell> { .init(name: "EditTokenTableViewCell", bundle: bundle) }

    /// Nib `FrozenView`.
    var frozenView: RswiftResources.NibReference<FrozenView> { .init(name: "FrozenView", bundle: bundle) }

    /// Nib `NonFungibleTokenViewCell`.
    var nonFungibleTokenViewCell: RswiftResources.NibReferenceReuseIdentifier<NonFungibleTokenViewCell, NonFungibleTokenViewCell> { .init(name: "NonFungibleTokenViewCell", bundle: bundle, identifier: "NonFungibleTokenViewCell") }

    /// Nib `PopTipViewController`.
    var popTipViewController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "PopTipViewController", bundle: bundle) }

    /// Nib `SetSwitchTableViewCell`.
    var setSwitchTableViewCell: RswiftResources.NibReferenceReuseIdentifier<SetSwitchTableViewCell, SetSwitchTableViewCell> { .init(name: "SetSwitchTableViewCell", bundle: bundle, identifier: "SetSwitchTableViewCell") }

    /// Nib `SetTableViewCell`.
    var setTableViewCell: RswiftResources.NibReferenceReuseIdentifier<SetTableViewCell, SetTableViewCell> { .init(name: "SetTableViewCell", bundle: bundle, identifier: "SetTableViewCell") }

    /// Nib `SignedTransactionView`.
    var signedTransactionView: RswiftResources.NibReference<SignedTransactionView> { .init(name: "SignedTransactionView", bundle: bundle) }

    /// Nib `TokenPurchaseView`.
    var tokenPurchaseView: RswiftResources.NibReference<TokenPurchaseView> { .init(name: "TokenPurchaseView", bundle: bundle) }

    /// Nib `TokenTableViewCell`.
    var tokenTableViewCell: RswiftResources.NibReferenceReuseIdentifier<TokenTableViewCell, TokenTableViewCell> { .init(name: "TokenTableViewCell", bundle: bundle, identifier: "TokenTableViewCell") }

    /// Nib `TransactionTableViewCell`.
    var transactionTableViewCell: RswiftResources.NibReferenceReuseIdentifier<TransactionTableViewCell, TransactionTableViewCell> { .init(name: "TransactionTableViewCell", bundle: bundle, identifier: "TransactionTableViewCell") }

    /// Nib `VoteInputView`.
    var voteInputView: RswiftResources.NibReference<VoteInputView> { .init(name: "VoteInputView", bundle: bundle) }

    /// Nib `VoteTableViewCell`.
    var voteTableViewCell: RswiftResources.NibReferenceReuseIdentifier<VoteTableViewCell, VoteTableViewCell> { .init(name: "VoteTableViewCell", bundle: bundle, identifier: "VoteTableViewCell") }

    /// Nib `WalletModeView`.
    var walletModeView: RswiftResources.NibReference<WalletModeView> { .init(name: "WalletModeView", bundle: bundle) }

    /// Nib `WalletTableViewCell`.
    var walletTableViewCell: RswiftResources.NibReferenceReuseIdentifier<WalletTableViewCell, WalletTableViewCell> { .init(name: "WalletTableViewCell", bundle: bundle, identifier: "WalletTableViewCell") }

    /// Nib `WordCollectionViewCell`.
    var wordCollectionViewCell: RswiftResources.NibReferenceReuseIdentifier<WordCollectionViewCell, WordCollectionViewCell> { .init(name: "WordCollectionViewCell", bundle: bundle, identifier: "word") }

    func validate() throws {
      if UIKit.UIImage(named: "glasses", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'glasses' is used in nib 'AccountViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "common_close", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'common_close' is used in nib 'ColdTransactionView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_back' is used in nib 'ColdTransactionView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "common_close", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'common_close' is used in nib 'FrozenView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_check", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_check' is used in nib 'FrozenView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_check_circle", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_check_circle' is used in nib 'FrozenView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icon_Facebook", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon_Facebook' is used in nib 'SetSwitchTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "cell_arrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'cell_arrow' is used in nib 'SetTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "icon_Facebook", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon_Facebook' is used in nib 'SetTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "common_close", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'common_close' is used in nib 'SignedTransactionView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "common_close", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'common_close' is used in nib 'TokenPurchaseView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "common_close", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'common_close' is used in nib 'VoteInputView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_watch", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_watch' is used in nib 'WalletTableViewCell', but couldn't be loaded.") }
    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 10 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `AccountAssetTableViewCell`.
    let accountAssetTableViewCell: RswiftResources.ReuseIdentifier<AccountAssetTableViewCell> = .init(identifier: "AccountAssetTableViewCell")

    /// Reuse identifier `AccountViewCell`.
    let accountViewCell: RswiftResources.ReuseIdentifier<AccountViewCell> = .init(identifier: "AccountViewCell")

    /// Reuse identifier `NonFungibleTokenViewCell`.
    let nonFungibleTokenViewCell: RswiftResources.ReuseIdentifier<NonFungibleTokenViewCell> = .init(identifier: "NonFungibleTokenViewCell")

    /// Reuse identifier `SetSwitchTableViewCell`.
    let setSwitchTableViewCell: RswiftResources.ReuseIdentifier<SetSwitchTableViewCell> = .init(identifier: "SetSwitchTableViewCell")

    /// Reuse identifier `SetTableViewCell`.
    let setTableViewCell: RswiftResources.ReuseIdentifier<SetTableViewCell> = .init(identifier: "SetTableViewCell")

    /// Reuse identifier `TokenTableViewCell`.
    let tokenTableViewCell: RswiftResources.ReuseIdentifier<TokenTableViewCell> = .init(identifier: "TokenTableViewCell")

    /// Reuse identifier `TransactionTableViewCell`.
    let transactionTableViewCell: RswiftResources.ReuseIdentifier<TransactionTableViewCell> = .init(identifier: "TransactionTableViewCell")

    /// Reuse identifier `VoteTableViewCell`.
    let voteTableViewCell: RswiftResources.ReuseIdentifier<VoteTableViewCell> = .init(identifier: "VoteTableViewCell")

    /// Reuse identifier `WalletTableViewCell`.
    let walletTableViewCell: RswiftResources.ReuseIdentifier<WalletTableViewCell> = .init(identifier: "WalletTableViewCell")

    /// Reuse identifier `word`.
    let word: RswiftResources.ReuseIdentifier<WordCollectionViewCell> = .init(identifier: "word")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 9 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var balance: balance { .init(bundle: bundle) }
    var browser: browser { .init(bundle: bundle) }
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var login: login { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }
    var set: set { .init(bundle: bundle) }
    var token: token { .init(bundle: bundle) }
    var transaction: transaction { .init(bundle: bundle) }
    var vote: vote { .init(bundle: bundle) }

    func balance(bundle: Foundation.Bundle) -> balance {
      .init(bundle: bundle)
    }
    func browser(bundle: Foundation.Bundle) -> browser {
      .init(bundle: bundle)
    }
    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func login(bundle: Foundation.Bundle) -> login {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func set(bundle: Foundation.Bundle) -> set {
      .init(bundle: bundle)
    }
    func token(bundle: Foundation.Bundle) -> token {
      .init(bundle: bundle)
    }
    func transaction(bundle: Foundation.Bundle) -> transaction {
      .init(bundle: bundle)
    }
    func vote(bundle: Foundation.Bundle) -> vote {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.balance.validate()
      try self.browser.validate()
      try self.launchScreen.validate()
      try self.login.validate()
      try self.main.validate()
      try self.set.validate()
      try self.token.validate()
      try self.transaction.validate()
      try self.vote.validate()
    }


    /// Storyboard `Balance`.
    struct balance: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UINavigationController

      let bundle: Foundation.Bundle

      let name = "Balance"

      var offLineSignViewController: RswiftResources.StoryboardViewControllerIdentifier<OffLineSignViewController> { .init(identifier: "OffLineSignViewController", storyboard: name, bundle: bundle) }
      var otherTokenViewController: RswiftResources.StoryboardViewControllerIdentifier<OtherTokenViewController> { .init(identifier: "OtherTokenViewController", storyboard: name, bundle: bundle) }
      var receiveNavVC: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UINavigationController> { .init(identifier: "ReceiveNavVC", storyboard: name, bundle: bundle) }
      var receiveViewController: RswiftResources.StoryboardViewControllerIdentifier<ReceiveViewController> { .init(identifier: "ReceiveViewController", storyboard: name, bundle: bundle) }
      var sendConfiremViewController: RswiftResources.StoryboardViewControllerIdentifier<SendConfiremViewController> { .init(identifier: "SendConfiremViewController", storyboard: name, bundle: bundle) }
      var sendNavVC: RswiftResources.StoryboardViewControllerIdentifier<BaseNavigationViewController> { .init(identifier: "SendNavVC", storyboard: name, bundle: bundle) }
      var sendTransactionViewController: RswiftResources.StoryboardViewControllerIdentifier<SendTransactionViewController> { .init(identifier: "SendTransactionViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "balance_code", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'balance_code' is used in storyboard 'Balance', but couldn't be loaded.") }
        if offLineSignViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'offLineSignViewController' could not be loaded from storyboard 'Balance' as 'OffLineSignViewController'.") }
        if otherTokenViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'otherTokenViewController' could not be loaded from storyboard 'Balance' as 'OtherTokenViewController'.") }
        if receiveNavVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'receiveNavVC' could not be loaded from storyboard 'Balance' as 'UIKit.UINavigationController'.") }
        if receiveViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'receiveViewController' could not be loaded from storyboard 'Balance' as 'ReceiveViewController'.") }
        if sendConfiremViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'sendConfiremViewController' could not be loaded from storyboard 'Balance' as 'SendConfiremViewController'.") }
        if sendNavVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'sendNavVC' could not be loaded from storyboard 'Balance' as 'BaseNavigationViewController'.") }
        if sendTransactionViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'sendTransactionViewController' could not be loaded from storyboard 'Balance' as 'SendTransactionViewController'.") }
      }
    }

    /// Storyboard `Browser`.
    struct browser: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = BrowserViewController

      let bundle: Foundation.Bundle

      let name = "Browser"

      var browserViewController: RswiftResources.StoryboardViewControllerIdentifier<BrowserViewController> { .init(identifier: "BrowserViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if browserViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'browserViewController' could not be loaded from storyboard 'Browser' as 'BrowserViewController'.") }
      }
    }

    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `Login`.
    struct login: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = NavigationController

      let bundle: Foundation.Bundle

      let name = "Login"

      var createWalletViewController: RswiftResources.StoryboardViewControllerIdentifier<CreateWalletViewController> { .init(identifier: "CreateWalletViewController", storyboard: name, bundle: bundle) }
      var loginHomeViewController: RswiftResources.StoryboardViewControllerIdentifier<LoginHomeViewController> { .init(identifier: "LoginHomeViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "register_check_n", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'register_check_n' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "register_check_s", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'register_check_s' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "welcome_logo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'welcome_logo' is used in storyboard 'Login', but couldn't be loaded.") }
        if createWalletViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'createWalletViewController' could not be loaded from storyboard 'Login' as 'CreateWalletViewController'.") }
        if loginHomeViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'loginHomeViewController' could not be loaded from storyboard 'Login' as 'LoginHomeViewController'.") }
      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = BaseTabbarViewController

      let bundle: Foundation.Bundle

      let name = "Main"

      var balanceViewController: RswiftResources.StoryboardViewControllerIdentifier<BalanceViewController> { .init(identifier: "BalanceViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "balance_bg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'balance_bg' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_arrow' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_freeze", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_freeze' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tron_power", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_tron_power' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_acount_highlight", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon_acount_highlight' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_acount_nor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon_acount_nor' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_setting_highlight", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon_setting_highlight' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_setting_nor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon_setting_nor' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_token_highlight", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon_token_highlight' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_token_nor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon_token_nor' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_transactions_highlight", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon_transactions_highlight' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_transactions_nor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon_transactions_nor' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_vote_highlight", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon_vote_highlight' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_vote_nor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon_vote_nor' is used in storyboard 'Main', but couldn't be loaded.") }
        if balanceViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'balanceViewController' could not be loaded from storyboard 'Main' as 'BalanceViewController'.") }
      }
    }

    /// Storyboard `Set`.
    struct set: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UINavigationController

      let bundle: Foundation.Bundle

      let name = "Set"

      var setViewController: RswiftResources.StoryboardViewControllerIdentifier<SetViewController> { .init(identifier: "SetViewController", storyboard: name, bundle: bundle) }
      var walletListViewController: RswiftResources.StoryboardViewControllerIdentifier<WalletListViewController> { .init(identifier: "WalletListViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "common_add", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'common_add' is used in storyboard 'Set', but couldn't be loaded.") }
        if setViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'setViewController' could not be loaded from storyboard 'Set' as 'SetViewController'.") }
        if walletListViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'walletListViewController' could not be loaded from storyboard 'Set' as 'WalletListViewController'.") }
      }
    }

    /// Storyboard `Token`.
    struct token: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Token"

      var createTokenViewController: RswiftResources.StoryboardViewControllerIdentifier<CreateTokenViewController> { .init(identifier: "CreateTokenViewController", storyboard: name, bundle: bundle) }
      var tokenListViewController: RswiftResources.StoryboardViewControllerIdentifier<TokenListViewController> { .init(identifier: "TokenListViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "common_add", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'common_add' is used in storyboard 'Token', but couldn't be loaded.") }
        if UIKit.UIImage(named: "register_check_n", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'register_check_n' is used in storyboard 'Token', but couldn't be loaded.") }
        if UIKit.UIImage(named: "register_check_s", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'register_check_s' is used in storyboard 'Token', but couldn't be loaded.") }
        if createTokenViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'createTokenViewController' could not be loaded from storyboard 'Token' as 'CreateTokenViewController'.") }
        if tokenListViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'tokenListViewController' could not be loaded from storyboard 'Token' as 'TokenListViewController'.") }
      }
    }

    /// Storyboard `Transaction`.
    struct transaction: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UINavigationController

      let bundle: Foundation.Bundle

      let name = "Transaction"

      var transactionsListViewController: RswiftResources.StoryboardViewControllerIdentifier<TransactionsListViewController> { .init(identifier: "TransactionsListViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if transactionsListViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'transactionsListViewController' could not be loaded from storyboard 'Transaction' as 'TransactionsListViewController'.") }
      }
    }

    /// Storyboard `Vote`.
    struct vote: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Vote"

      var voteViewController: RswiftResources.StoryboardViewControllerIdentifier<VoteViewController> { .init(identifier: "VoteViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if voteViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'voteViewController' could not be loaded from storyboard 'Vote' as 'VoteViewController'.") }
      }
    }
  }
}